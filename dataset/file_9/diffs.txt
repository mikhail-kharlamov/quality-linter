diff --git 

diff --git a/SkipList/SkipList.sln b/SkipList/SkipList.sln
new file mode 100644
index 0000000..66a23b5
--- /dev/null
+++ b/SkipList/SkipList.sln
@@ -0,0 +1,28 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.0.31903.59
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SkipList", "SkipList\SkipList.csproj", "{2E1114B2-7337-452D-AEF8-F7D3C1E9D109}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "SkipListTests", "SkipListTests\SkipListTests.csproj", "{DA818A0E-F67B-4E3A-AA5B-EE30611B2E00}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{2E1114B2-7337-452D-AEF8-F7D3C1E9D109}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{2E1114B2-7337-452D-AEF8-F7D3C1E9D109}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{2E1114B2-7337-452D-AEF8-F7D3C1E9D109}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{2E1114B2-7337-452D-AEF8-F7D3C1E9D109}.Release|Any CPU.Build.0 = Release|Any CPU
+		{DA818A0E-F67B-4E3A-AA5B-EE30611B2E00}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{DA818A0E-F67B-4E3A-AA5B-EE30611B2E00}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{DA818A0E-F67B-4E3A-AA5B-EE30611B2E00}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{DA818A0E-F67B-4E3A-AA5B-EE30611B2E00}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+EndGlobal


diff --git a/SkipList/SkipList/GlobalSuppressions.cs b/SkipList/SkipList/GlobalSuppressions.cs
new file mode 100644
index 0000000..7534c3e
--- /dev/null
+++ b/SkipList/SkipList/GlobalSuppressions.cs
@@ -0,0 +1,9 @@
+// This file is used by Code Analysis to maintain SuppressMessage
+// attributes that are applied to this project.
+// Project-level suppressions either have no target or are given
+// a specific target and scoped to a namespace, type, member, etc.
+
+using System.Diagnostics.CodeAnalysis;
+
+[assembly: SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1101:Prefix local calls with this", Justification = "Reviewed")]
+[assembly: SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1633:File should have header", Justification = "Reviewed")]


diff --git a/SkipList/SkipList/SkipList.cs b/SkipList/SkipList/SkipList.cs
new file mode 100644
index 0000000..681d8d0
--- /dev/null
+++ b/SkipList/SkipList/SkipList.cs
@@ -0,0 +1,375 @@
+﻿namespace SkipList;
+
+using System.Collections;
+
+/// <summary>
+/// Class realizes skip list data structure.
+/// </summary>
+/// <typeparam name="T">The type of elements in skip list.</typeparam>
+public class SkipList<T> : IList<T>
+{
+    private const double PushUpProbability = 0.5;
+    private readonly Comparer<T> comparer;
+    private readonly Random random = new ();
+    private int version;
+    private SkipListNode bottomHead;
+    private SkipListNode topHead;
+
+    /// <summary>
+    /// Initializes a new instance of the <see cref="SkipList{T}"/> class that is empty and has the default comparer for <typeparamref name="T"/>.
+    /// </summary>
+    public SkipList()
+    {
+        bottomHead = new ();
+        topHead = bottomHead;
+        comparer = Comparer<T>.Default;
+    }
+
+    /// <summary>
+    /// Initializes a new instance of the <see cref="SkipList{T}"/> class that is empty and has specified comparer.
+    /// </summary>
+    /// <param name="comparer">Comparer to use for comparing elements.</param>
+    public SkipList(Comparer<T> comparer)
+    : this()
+    {
+        this.comparer = comparer;
+    }
+
+    /// <summary>
+    /// Initializes a new instance of the <see cref="SkipList{T}"/> class that contains elements copied from the specified collection.
+    /// </summary>
+    /// <param name="values">The collection whoose elements are copied to the new skiplist.</param>
+    public SkipList(IEnumerable<T> values)
+    : this()
+    {
+        foreach (var value in values)
+        {
+            this.Add(value);
+        }
+    }
+
+    /// <summary>
+    /// Initializes a new instance of the <see cref="SkipList{T}"/> class that contains elements copied from the specified collection and has specified comparer.
+    /// </summary>
+    /// <param name="values">The collection whoose elements are copied to the new skiplist.</param>
+    /// <param name="comparer">Comparer to use for comparing elements.</param>
+    public SkipList(IEnumerable<T> values, Comparer<T> comparer)
+    : this(values)
+    {
+        this.comparer = comparer;
+    }
+
+    /// <summary>
+    /// Gets the number of elements in the <see cref="SkipList{T}"/>.
+    /// </summary>
+    public int Count { get; private set; }
+
+    /// <summary>
+    /// Gets a value indicating whether the ICollection is read-only.
+    /// </summary>
+    bool ICollection<T>.IsReadOnly => false;
+
+    /// <inheritdoc/>
+    T IList<T>.this[int index]
+    {
+        get => throw new NotSupportedException();
+        set => throw new NotSupportedException();
+    }
+
+    /// <summary>
+    /// <inheritdoc/>
+    /// </summary>
+    /// <returns>An <see cref="IEnumerator"/> that can be used to iterate through the collection.</returns>
+    IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
+
+    /// <summary>
+    /// <inheritdoc/>
+    /// </summary>
+    /// <returns>An <see cref="IEnumerator{T}"/> that can be used to iterate through the collection.</returns>
+    public IEnumerator<T> GetEnumerator() => new Enumerator(this);
+
+    /// <summary>
+    /// Adds object to the <see cref="SkipList{T}"/>.
+    /// </summary>
+    /// <param name="key">The object to be added to the end of the <see cref="SkipList{T}"/>.</param>
+    public void Add(T key)
+    {
+        var node = Add(topHead, key);
+        if (node != null)
+        {
+            var newTopHead = new SkipListNode
+            {
+                Down = topHead,
+                Next = new () { Key = key, Down = node },
+            };
+            topHead = newTopHead;
+        }
+
+        ++Count;
+        ++version;
+    }
+
+    /// <inheritdoc/>
+    void IList<T>.Insert(int position, T item) => throw new NotSupportedException();
+
+    /// <summary>
+    /// Removes the first occurrecne of a specific object.
+    /// </summary>
+    /// <param name="item">The object to remove from the <see cref="SkipList{T}"/>.</param>
+    /// <returns>true if item is successfully removed; otherwise false.</returns>
+    public bool Remove(T item)
+    {
+        if (Remove(topHead, item))
+        {
+            --Count;
+            ++version;
+            return true;
+        }
+
+        return false;
+    }
+
+    /// <inheritdoc/>
+    void IList<T>.RemoveAt(int position) => throw new NotSupportedException();
+
+    /// <summary>
+    /// Removes all elements from the <see cref="SkipList{T}"/>.
+    /// </summary>
+    public void Clear()
+    {
+        bottomHead = new ();
+        topHead = bottomHead;
+        ++version;
+        Count = 0;
+    }
+
+    /// <summary>
+    /// Determines whether an element is in the <see cref="SkipList{T}"/>.
+    /// </summary>
+    /// <param name="key">The object to locate in the <see cref="SkipList{T}"/>.</param>
+    /// <returns>true if key is found in the <see cref="SkipList{T}"/>; false otherwise.</returns>
+    public bool Contains(T key)
+    {
+        return Find(topHead, key) != null;
+    }
+
+    /// <summary>
+    /// Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="SkipList{T}"/>.
+    /// </summary>
+    /// <param name="key">The object to locate in the <see cref="SkipList{T}"/>.</param>
+    /// <returns>The zero-based index of the first occurrence of item within the entire <see cref="SkipList{T}"/>, if found; otherwise, -1.</returns>
+    public int IndexOf(T key)
+    {
+        var currentNode = bottomHead;
+        var index = 0;
+        while (currentNode.Next != null && comparer.Compare(currentNode.Next.Key, key) < 0)
+        {
+            currentNode = currentNode.Next;
+            index++;
+        }
+
+        return currentNode.Next != null && comparer.Compare(currentNode.Next.Key, key) == 0 ? index : -1;
+    }
+
+    /// <summary>
+    /// Copies the entire <see cref="SkipList{T}"/> to a compatible one-dimensional array, starting at the specified index of the target array.
+    /// </summary>
+    /// <param name="array">The one-dimensional Array that is the destination of the elements copied from <see cref="SkipList{T}"/>.</param>
+    /// <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
+    /// <exception cref="ArgumentException">Thrown when the number of elements in the <see cref="SkipList{T}"/> is greater than the available space.</exception>
+    /// <exception cref="ArgumentNullException">Thrown when array is null.</exception>
+    /// <exception cref="ArgumentOutOfRangeException">Thrown when arrayIndex is greater than array length or less than zero.</exception>
+    public void CopyTo(T?[] array, int arrayIndex)
+    {
+        ArgumentNullException.ThrowIfNull(array);
+
+        if (arrayIndex < 0 || arrayIndex >= array.Length)
+        {
+            throw new ArgumentOutOfRangeException(nameof(arrayIndex));
+        }
+
+        if (arrayIndex + Count > array.Length)
+        {
+            throw new ArgumentException("Not enough space to copy elements");
+        }
+
+        var currentNode = bottomHead;
+        while (currentNode.Next != null && arrayIndex < array.Length)
+        {
+            array[arrayIndex] = currentNode.Next.Key;
+            currentNode = currentNode.Next;
+            arrayIndex++;
+        }
+    }
+
+    private bool Remove(SkipListNode node, T key)
+    {
+        while (node.Next != null && comparer.Compare(node.Next.Key, key) < 0)
+        {
+            node = node.Next;
+        }
+
+        var result = false;
+        if (node.Down != null)
+        {
+            result |= Remove(node.Down, key);
+        }
+
+        if (node.Next != null && comparer.Compare(node.Next.Key, key) == 0)
+        {
+            node.Next = node.Next.Next;
+            return true;
+        }
+
+        return result;
+    }
+
+    private SkipListNode? Add(SkipListNode node, T key)
+    {
+        while (node.Next != null && comparer.Compare(node.Next.Key, key) < 0)
+        {
+            node = node.Next;
+        }
+
+        var downNode = node.Down == null ? null : Add(node.Down, key);
+
+        if (downNode != null || node.Down == null)
+        {
+            node.Next = new () { Next = node.Next, Down = downNode, Key = key };
+            if (random.NextDouble() < PushUpProbability)
+            {
+                return node.Next;
+            }
+            else
+            {
+                return null;
+            }
+        }
+
+        return null;
+    }
+
+    private SkipListNode? Find(SkipListNode node, T key)
+    {
+        while (node.Next != null && comparer.Compare(node.Next.Key, key) < 0)
+        {
+            node = node.Next;
+        }
+
+        if (node.Next != null && comparer.Compare(node.Next.Key, key) == 0)
+        {
+            return node;
+        }
+        else
+        {
+            return node.Down == null ? null : Find(node.Down, key);
+        }
+    }
+
+    /// <summary>
+    /// Enumerates the elements of the <see cref="SkipList{t}"/>.
+    /// </summary>
+    private struct Enumerator : IEnumerator<T>
+    {
+        private readonly SkipList<T> skipList;
+        private readonly int version;
+        private SkipListNode current;
+        private bool isHead;
+
+        /// <summary>
+        /// Initializes a new instance of the <see cref="SkipList{T}.Enumerator"/> struct.
+        /// </summary>
+        /// <param name="skiplist">SkipList to enumerate.</param>
+        public Enumerator(SkipList<T> skiplist)
+        {
+            this.skipList = skiplist;
+            version = skiplist.version;
+            current = skipList.bottomHead;
+            isHead = true;
+        }
+
+        /// <summary>
+        /// Gets the element at the current position of the enumerator.
+        /// </summary>
+        public T Current
+        {
+            get
+            {
+                if (version != skipList.version)
+                {
+                    throw new InvalidOperationException("Invalid iterator");
+                }
+
+                if (isHead)
+                {
+                    throw new InvalidOperationException("Current position is before first element");
+                }
+
+                if (current.Key == null)
+                {
+                    throw new InvalidOperationException("Current node value is null");
+                }
+
+                return current.Key;
+            }
+        }
+
+        /// <summary>
+        /// Gets the element at the current position of the enumerator.
+        /// </summary>
+        object IEnumerator.Current => Current!;
+
+        /// <summary>
+        /// <inheritdoc/>
+        /// </summary>
+        public readonly void Dispose()
+        {
+        }
+
+        /// <summary>
+        /// Advances enumerator to the next element of the <see cref="SkipList{T}"/>.
+        /// </summary>
+        /// <returns>true if succsessfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
+        /// <exception cref="InvalidOperationException">Thrown if collection was modified after creating enumerator.</exception>
+        public bool MoveNext()
+        {
+            if (version != skipList.version)
+            {
+                throw new InvalidOperationException("Invalid iterator");
+            }
+
+            if (current.Next != null)
+            {
+                current = current.Next;
+                isHead = false;
+                return true;
+            }
+
+            return false;
+        }
+
+        /// <summary>
+        /// Sets the enumerator to its initial position.
+        /// </summary>
+        /// <exception cref="InvalidOperationException">Thrown if collection was modified after creating enumerator.</exception>
+        public void Reset()
+        {
+            if (version != skipList.version)
+            {
+                throw new InvalidOperationException("Invalid iterator");
+            }
+
+            current = skipList.bottomHead;
+            isHead = true;
+        }
+    }
+
+    private class SkipListNode
+    {
+        public SkipListNode? Next { get; set; }
+
+        public SkipListNode? Down { get; set; }
+
+        public T? Key { get; set; }
+    }
+}


diff --git a/SkipList/SkipList/SkipList.csproj b/SkipList/SkipList/SkipList.csproj
new file mode 100644
index 0000000..bea3da1
--- /dev/null
+++ b/SkipList/SkipList/SkipList.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net8.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="StyleCop.Analyzers" Version="1.1.118">
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+      <PrivateAssets>all</PrivateAssets>
+    </PackageReference>
+  </ItemGroup>
+
+</Project>


diff --git a/SkipList/SkipListTests/GlobalUsings.cs b/SkipList/SkipListTests/GlobalUsings.cs
new file mode 100644
index 0000000..cefced4
--- /dev/null
+++ b/SkipList/SkipListTests/GlobalUsings.cs
@@ -0,0 +1 @@
+global using NUnit.Framework;
\ No newline at end of file


diff --git a/SkipList/SkipListTests/SkipListTests.cs b/SkipList/SkipListTests/SkipListTests.cs
new file mode 100644
index 0000000..376e80e
--- /dev/null
+++ b/SkipList/SkipListTests/SkipListTests.cs
@@ -0,0 +1,123 @@
+namespace SkipList.Tests;
+
+public class Tests
+{
+    [Test]
+    public void Contains_OneElement_ReturnsExpectedResult()
+    {
+        var skipList = new SkipList<int>();
+        skipList.Add(1);
+        Assert.That(skipList.Contains(1), Is.True);
+        Assert.That(skipList.Contains(2), Is.False);
+    }
+
+    [Test]
+    public void Constructor_FromListOfIntsWithDefaultComparer_ContainsEveryElemFromList()
+    {
+        var list = new List<int> { 1, 2, 1000, 100, -1, 0 };
+        var skipList = new SkipList<int>(list); 
+        Assert.That(skipList.Count, Is.EqualTo(6));
+        foreach (var elem in list)
+        {
+            Assert.That(skipList.Contains(elem), Is.True);
+        }
+    }
+
+    [Test]
+    public void Add_IntsToEmptySKipList_ContainsEveryAddedElement()
+    {
+        var list = new List<int> { 1, 2, 1000, 100, -1, 0 };
+        var skipList = new SkipList<int> ();
+        foreach (var elem in list)
+        {
+            skipList.Add(elem);
+        }
+
+        Assert.That(skipList.Count, Is.EqualTo(6));
+        
+        foreach (var elem in list)
+        {
+            Assert.That(skipList.Contains(elem), Is.True, $"elem is {elem}");
+        }
+    }
+
+    [Test]
+    public void Remove_OneElement_DoesNotContainRemovedElement()
+    {
+        var skipList = new SkipList<int>([1, 2, 1000, 100, -1, 0]); 
+        skipList.Remove(0);
+        Assert.That(skipList.Contains(0), Is.False);
+    }
+
+    [Test]
+    public void Clear_NotEmptySkipList_DoesNotContainElements()
+    {
+        var list = new List<int> { 1, 2, 1000, 100, -1, 0 };
+        var skipList = new SkipList<int> (list);
+        skipList.Clear();
+
+        Assert.That(skipList.Count, Is.EqualTo(0));
+
+        foreach (var elem in list)
+        {
+            Assert.That(skipList.Contains(elem), Is.False);
+        }
+    }
+
+    [Test]
+    public void IndexOf_ElementInSkipList_ReturnsExpectedValue()
+    {
+        var skipList = new SkipList<int>([1, 2, 1000, 100, -1, 0]); 
+        Assert.That(skipList.IndexOf(-1), Is.EqualTo(0), $"Contain? {skipList.Contains(-1)}");
+        Assert.That(skipList.IndexOf(0), Is.EqualTo(1));
+        Assert.That(skipList.IndexOf(1000), Is.EqualTo(5));
+    }
+
+    [Test]
+    public void CopyTo_ArrayHasEnoughSpace_ArrayContainsEveryCopiedElement()
+    {
+        var list = new List<int> { 1, 2, 1000, 100, -1, 0 };
+        list.Sort();
+        var skipList = new SkipList<int> (list);
+        var array = new int[6];
+        skipList.CopyTo(array, 0);
+        for (int i = 0; i < 6; ++i)
+        {
+            Assert.That(array[i], Is.EqualTo(list[i]));
+        }
+    }
+
+    [Test]
+    public void Enumerator_TryUsingAreEqual_ShouldPassTest()
+    {
+        var list = new List<int> { 1, 2, 1000, 100, -1, 0 };
+        var skipList = new SkipList<int>(list);
+        list.Sort();
+        CollectionAssert.AreEqual(skipList, list);
+    }
+
+    [Test]
+    public void Enumerator_InsideForeach()
+    {
+        var list = new List<int> { 1, 2, 1000, 100, -1, 0 };
+        var skipList = new SkipList<int>(list);
+        var actual = new List<int>();
+        foreach (var item in skipList)
+        {
+            actual.Add(item);
+        }
+        list.Sort();
+        CollectionAssert.AreEqual(actual, list);
+    }
+
+    [Test]
+    public void Enumerator_ChangeCollectionAfterCreatingEnumerator_ThrowsInvalidOperationException()
+    {
+        var skipList = new SkipList<int>([1, 2, 1000, 100, -1, 0]); 
+        var enumerator = skipList.GetEnumerator();
+        enumerator.MoveNext();
+        skipList.Add(1);
+        Assert.Throws<InvalidOperationException>(() => enumerator.MoveNext());
+        Assert.Throws<InvalidOperationException>(() => enumerator.Reset());
+    }
+}
\ No newline at end of file


diff --git a/SkipList/SkipListTests/SkipListTests.csproj b/SkipList/SkipListTests/SkipListTests.csproj
new file mode 100644
index 0000000..e99bdb0
--- /dev/null
+++ b/SkipList/SkipListTests/SkipListTests.csproj
@@ -0,0 +1,24 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net8.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+
+    <IsPackable>false</IsPackable>
+    <IsTestProject>true</IsTestProject>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.6.0" />
+    <PackageReference Include="NUnit" Version="3.13.3" />
+    <PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />
+    <PackageReference Include="NUnit.Analyzers" Version="3.6.1" />
+    <PackageReference Include="coverlet.collector" Version="6.0.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\SkipList\SkipList.csproj" />
+  </ItemGroup>
+
+</Project>
