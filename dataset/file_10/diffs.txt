diff --git 

diff --git a/BubbleSort/BubbleSort.sln b/BubbleSort/BubbleSort.sln
new file mode 100644
index 0000000..88d71d1
--- /dev/null
+++ b/BubbleSort/BubbleSort.sln
@@ -0,0 +1,28 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.0.31903.59
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BubbleSort", "BubbleSort\BubbleSort.csproj", "{03E0F73C-8F30-4715-A3FD-3088EE0CFBDA}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "BubbleSortTests", "BubbleSortTests\BubbleSortTests.csproj", "{9F0C67A0-B3BA-4C82-BC26-CAC8E07920DF}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{03E0F73C-8F30-4715-A3FD-3088EE0CFBDA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{03E0F73C-8F30-4715-A3FD-3088EE0CFBDA}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{03E0F73C-8F30-4715-A3FD-3088EE0CFBDA}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{03E0F73C-8F30-4715-A3FD-3088EE0CFBDA}.Release|Any CPU.Build.0 = Release|Any CPU
+		{9F0C67A0-B3BA-4C82-BC26-CAC8E07920DF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{9F0C67A0-B3BA-4C82-BC26-CAC8E07920DF}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{9F0C67A0-B3BA-4C82-BC26-CAC8E07920DF}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{9F0C67A0-B3BA-4C82-BC26-CAC8E07920DF}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+EndGlobal


diff --git a/BubbleSort/BubbleSort/BubbleSort.cs b/BubbleSort/BubbleSort/BubbleSort.cs
new file mode 100644
index 0000000..c59d525
--- /dev/null
+++ b/BubbleSort/BubbleSort/BubbleSort.cs
@@ -0,0 +1,41 @@
+﻿namespace BubbleSort;
+
+/// <summary>
+/// Static class realizes buble sort for generic collections.
+/// </summary>
+public static class BubbleSort
+{
+    /// <summary>
+    /// Sorts elements of the given collection using bubble sort.
+    /// </summary>
+    /// <typeparam name="T">Type of elements in the collection.</typeparam>
+    /// <param name="values">Collection to sort.</param>
+    /// <param name="comparer">Comparer to compare elements of the collection.</param>
+    /// <returns>Array that contains elements of the collection in sorted order.</returns>
+    public static T[] Sort<T>(ICollection<T> values, IComparer<T> comparer)
+    {
+        ArgumentNullException.ThrowIfNull(values);
+        ArgumentNullException.ThrowIfNull(comparer);
+
+        var size = values.Count;
+        if (size == 0)
+        {
+            return Array.Empty<T>();
+        }
+
+        T[] array = new T[size];
+        values.CopyTo(array, 0);
+
+        for (int i = 0; i < size; ++i) {
+            for (int j = 0; j < size - 1; ++j)
+            {
+                if (comparer.Compare(array[j], array[j + 1]) > 0)
+                {
+                    (array[j], array[j + 1]) = (array[j + 1], array[j]);
+                }
+            }
+        }
+
+        return array;
+    }
+}
\ No newline at end of file


diff --git a/BubbleSort/BubbleSort/BubbleSort.csproj b/BubbleSort/BubbleSort/BubbleSort.csproj
new file mode 100644
index 0000000..bea3da1
--- /dev/null
+++ b/BubbleSort/BubbleSort/BubbleSort.csproj
@@ -0,0 +1,16 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net8.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="StyleCop.Analyzers" Version="1.1.118">
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+      <PrivateAssets>all</PrivateAssets>
+    </PackageReference>
+  </ItemGroup>
+
+</Project>


diff --git a/BubbleSort/BubbleSortTests/BubbleSortTests.cs b/BubbleSort/BubbleSortTests/BubbleSortTests.cs
new file mode 100644
index 0000000..e505adb
--- /dev/null
+++ b/BubbleSort/BubbleSortTests/BubbleSortTests.cs
@@ -0,0 +1,45 @@
+namespace BubbleSort.Tests;
+
+using Moq;
+
+public class Tests
+{
+    [Test]
+    public void BubbleSort_ListOfIntsWithDefaultComparer_ReturnsSortedArray()
+    {
+        var listInts = new List<int>() { 1, 3101, -10, 100, 0, 0, -1 };
+        CollectionAssert.AreEqual(listInts.Order().ToArray(), BubbleSort.Sort(listInts, Comparer<int>.Default));
+    }
+
+    [Test]
+    public void BubbleSort_ListOfStringsWithDefaultComparer_ReturnsSortedArray()
+    {
+        var listStrings = new List<string>() { "", " ", "AAA", "AAA", "ZZZ", "0", "-1", "-10"};
+        CollectionAssert.AreEqual(listStrings.Order().ToArray(), BubbleSort.Sort(listStrings, Comparer<string>.Default));
+    }
+
+
+    [Test]
+    public void BubbleSort_WithEmptyList_ReturnsEmptyArray()
+    {
+        var emptyList = new List<int>();
+        CollectionAssert.AreEqual(Array.Empty<int>(), BubbleSort.Sort(emptyList, Comparer<int>.Default));
+    }
+
+    [Test]
+    public void BubbleSort_WithCustomComparer_ReturnsExpectedArray()
+    {
+        var ComparerMock = new Mock<IComparer<int>>();
+        ComparerMock.Setup(x => x.Compare(100, 0)).Returns(1);
+        ComparerMock.Setup(x => x.Compare(100, -1)).Returns(1);
+        ComparerMock.Setup(x => x.Compare(0, -1)).Returns(-1);
+        ComparerMock.Setup(x => x.Compare(-1, 100)).Returns(-1);
+        var lsit = new List<int> { 100, 0, -1};
+        var expected = new int[3] {0, -1, 100};
+        CollectionAssert.AreEqual(expected, BubbleSort.Sort(lsit, ComparerMock.Object));
+        ComparerMock.Verify(x => x.Compare(100, 0), Times.AtLeastOnce());
+        ComparerMock.Verify(x => x.Compare(100, -1), Times.AtLeastOnce());
+        ComparerMock.Verify(x => x.Compare(0, -1), Times.AtLeastOnce());
+        ComparerMock.Verify(x => x.Compare(-1, 100), Times.AtLeastOnce);
+    }
+}
\ No newline at end of file


diff --git a/BubbleSort/BubbleSortTests/BubbleSortTests.csproj b/BubbleSort/BubbleSortTests/BubbleSortTests.csproj
new file mode 100644
index 0000000..9ca4090
--- /dev/null
+++ b/BubbleSort/BubbleSortTests/BubbleSortTests.csproj
@@ -0,0 +1,25 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net8.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+
+    <IsPackable>false</IsPackable>
+    <IsTestProject>true</IsTestProject>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.6.0" />
+    <PackageReference Include="moq" Version="4.20.70" />
+    <PackageReference Include="NUnit" Version="3.13.3" />
+    <PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />
+    <PackageReference Include="NUnit.Analyzers" Version="3.6.1" />
+    <PackageReference Include="coverlet.collector" Version="6.0.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\BubbleSort\BubbleSort.csproj" />
+  </ItemGroup>
+
+</Project>


diff --git a/BubbleSort/BubbleSortTests/GlobalUsings.cs b/BubbleSort/BubbleSortTests/GlobalUsings.cs
new file mode 100644
index 0000000..cefced4
--- /dev/null
+++ b/BubbleSort/BubbleSortTests/GlobalUsings.cs
@@ -0,0 +1 @@
+global using NUnit.Framework;
\ No newline at end of file
