[
    {
        "name": "BubbleSort.cs",
        "extension": "cs",
        "is_binary": false,
        "path": "BubbleSort/BubbleSort/BubbleSort.cs",
        "content": "ï»¿namespace BubbleSort;\n\n/// <summary>\n/// Static class realizes buble sort for generic collections.\n/// </summary>\npublic static class BubbleSort\n{\n    /// <summary>\n    /// Sorts elements of the given collection using bubble sort.\n    /// </summary>\n    /// <typeparam name=\"T\">Type of elements in the collection.</typeparam>\n    /// <param name=\"values\">Collection to sort.</param>\n    /// <param name=\"comparer\">Comparer to compare elements of the collection.</param>\n    /// <returns>Array that contains elements of the collection in sorted order.</returns>\n    public static T[] Sort<T>(ICollection<T> values, IComparer<T> comparer)\n    {\n        ArgumentNullException.ThrowIfNull(values);\n        ArgumentNullException.ThrowIfNull(comparer);\n\n        var size = values.Count;\n        if (size == 0)\n        {\n            return Array.Empty<T>();\n        }\n\n        T[] array = new T[size];\n        values.CopyTo(array, 0);\n\n        for (int i = 0; i < size; ++i) {\n            for (int j = 0; j < size - 1; ++j)\n            {\n                if (comparer.Compare(array[j], array[j + 1]) > 0)\n                {\n                    (array[j], array[j + 1]) = (array[j + 1], array[j]);\n                }\n            }\n        }\n\n        return array;\n    }\n}"
    },
    {
        "name": "BubbleSortTests.cs",
        "extension": "cs",
        "is_binary": false,
        "path": "BubbleSort/BubbleSortTests/BubbleSortTests.cs",
        "content": "namespace BubbleSort.Tests;\r\n\r\nusing Moq;\r\n\r\npublic class Tests\r\n{\r\n    [Test]\r\n    public void BubbleSort_ListOfIntsWithDefaultComparer_ReturnsSortedArray()\r\n    {\r\n        var listInts = new List<int>() { 1, 3101, -10, 100, 0, 0, -1 };\r\n        CollectionAssert.AreEqual(listInts.Order().ToArray(), BubbleSort.Sort(listInts, Comparer<int>.Default));\r\n    }\r\n\r\n    [Test]\r\n    public void BubbleSort_ListOfStringsWithDefaultComparer_ReturnsSortedArray()\r\n    {\r\n        var listStrings = new List<string>() { \"\", \" \", \"AAA\", \"AAA\", \"ZZZ\", \"0\", \"-1\", \"-10\"};\r\n        CollectionAssert.AreEqual(listStrings.Order().ToArray(), BubbleSort.Sort(listStrings, Comparer<string>.Default));\r\n    }\r\n\r\n\r\n    [Test]\r\n    public void BubbleSort_WithEmptyList_ReturnsEmptyArray()\r\n    {\r\n        var emptyList = new List<int>();\r\n        CollectionAssert.AreEqual(Array.Empty<int>(), BubbleSort.Sort(emptyList, Comparer<int>.Default));\r\n    }\r\n\r\n    [Test]\r\n    public void BubbleSort_WithCustomComparer_ReturnsExpectedArray()\r\n    {\r\n        var ComparerMock = new Mock<IComparer<int>>();\r\n        ComparerMock.Setup(x => x.Compare(100, 0)).Returns(1);\r\n        ComparerMock.Setup(x => x.Compare(100, -1)).Returns(1);\r\n        ComparerMock.Setup(x => x.Compare(0, -1)).Returns(-1);\r\n        ComparerMock.Setup(x => x.Compare(-1, 100)).Returns(-1);\r\n        var lsit = new List<int> { 100, 0, -1};\r\n        var expected = new int[3] {0, -1, 100};\r\n        CollectionAssert.AreEqual(expected, BubbleSort.Sort(lsit, ComparerMock.Object));\r\n        ComparerMock.Verify(x => x.Compare(100, 0), Times.AtLeastOnce());\r\n        ComparerMock.Verify(x => x.Compare(100, -1), Times.AtLeastOnce());\r\n        ComparerMock.Verify(x => x.Compare(0, -1), Times.AtLeastOnce());\r\n        ComparerMock.Verify(x => x.Compare(-1, 100), Times.AtLeastOnce);\r\n    }\r\n}"
    }
]