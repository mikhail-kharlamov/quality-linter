[
  {
    "name": "Calculator.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "HW8/calculator/calculator/calculator/Calculator.cs",
    "content": "// <copyright file=\"SparseVector.cs\" company=\"Mikhail Kharlamov\">\n// Copyright (c) Mikhail Kharlamov. All rights reserved.\n// </copyright>\n\nnamespace Calculator;\n\n/// <summary>\n/// Represents the core logic for a calculator with basic arithmetic operations.\n/// Maintains calculator state and performs calculations.\n/// </summary>\npublic class CalculatorLogic\n{\n    private string displayValue = \"0\";\n\n    private double number = 0;\n\n    private char? operation = null;\n\n    private string buffer = \"\";\n\n    /// <summary>\n    /// Gets the current display value of the calculator.\n    /// </summary>\n    /// <returns>The string representation of the current display value.</returns>\n    /// <remarks>\n    /// Returns \"0\" if the display value is empty.\n    /// </remarks>\n    public string GetDisplay() => string.IsNullOrEmpty(this.displayValue) ? \"0\" : this.displayValue;\n\n    /// <summary>\n    /// Adds a digit to the current input buffer\n    /// </summary>\n    /// <param name=\"digit\">The digit character to add (0-9).</param>\n    /// <exception cref=\"ArgumentException\">Thrown if the input is not a valid digit.</exception>\n    public void AddDigit(char digit)\n    {\n        if (this.displayValue != \"0\")\n        {\n            this.buffer += digit.ToString();\n        }\n        else\n        {\n            this.buffer = digit.ToString();\n        }\n        this.displayValue = this.buffer;\n    }\n\n    /// <summary>\n    /// Sets the arithmetic operation to perform.\n    /// </summary>\n    /// <param name=\"operation\">The operation character (+, -, *, /, =).</param>\n    /// <exception cref=\"ArgumentException\">Thrown if the operation is not supported.</exception>\n    public void SetOperator(char operation)\n    {\n        if (!string.IsNullOrEmpty(this.buffer))\n        {\n            if (this.operation is null)\n            {\n                this.number = double.Parse(this.buffer);\n            }\n            else\n            {\n                var newNumber = double.Parse(this.buffer);\n                switch (this.operation)\n                {\n                    case '+':\n                        this.number += newNumber;\n                        break;\n                    case '-':\n                        this.number -= newNumber;\n                        break;\n                    case '*':\n                        this.number *= newNumber;\n                        break;\n                    case '/':\n                        this.number /= newNumber;\n                        break;\n                }\n            }\n        }\n\n        this.displayValue = this.number.ToString();\n        this.buffer = \"\";\n        if (operation != '=')\n        {\n            this.operation = operation;\n        }\n        else\n        {\n            this.operation = null;\n        }\n    }\n\n    /// <summary>\n    /// Resets the calculator to its initial state.\n    /// </summary>\n    public void Clear()\n    {\n        this.displayValue = \"0\";\n        this.number = 0;\n        this.operation = null;\n        this.buffer = \"\";\n    }\n\n    /// <summary>\n    /// Performs special calculator operations.\n    /// </summary>\n    /// <param name=\"operator\">The special operation to perform (\",\", \"+/-\", \"%\").</param>\n    /// <exception cref=\"ArgumentException\">Thrown if the operator is not supported.</exception>\n    public void SetServiceOperator(string @operator)\n    {\n        switch (@operator)\n        {\n            case \",\":\n                if (!this.buffer.Contains(','))\n                {\n                    this.buffer += \",\";\n                }\n                break;\n            case \"+/-\":\n                if (!this.buffer.Contains('-'))\n                {\n                    this.buffer = \"-\" + this.buffer;\n                }\n                else\n                {\n                    this.buffer = this.buffer.Substring(1);\n                }\n                break;\n            case \"%\":\n                this.SetOperator('/');\n                foreach (var digit in \"100\")\n                {\n                    this.AddDigit(digit);\n                }\n                this.SetOperator('=');\n                return;\n        }\n\n        if (this.buffer == \",\")\n        {\n            this.displayValue += this.buffer;\n            this.buffer = this.displayValue;\n        }\n        else if (this.buffer == \"-\")\n        {\n            this.buffer += this.displayValue;\n            this.displayValue = this.buffer;\n        }\n        else\n        {\n            this.displayValue = this.buffer;\n        }\n    }\n}"
  },
  {
    "name": "MainWindowViewModel.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "HW8/calculator/calculator/calculator/MainWindowViewModel.cs",
    "content": "// <copyright file=\"SparseVector.cs\" company=\"Mikhail Kharlamov\">\n// Copyright (c) Mikhail Kharlamov. All rights reserved.\n// </copyright>\n\nnamespace Calculator;\n\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing System.Windows.Input;\n\n/// <summary>\n/// ViewModel class for the calculator's main window, implementing INotifyPropertyChanged\n/// to support data binding and command handling.\n/// </summary>\npublic class MainWindowViewModel : INotifyPropertyChanged\n{\n    private readonly CalculatorLogic calculator = new();\n\n    private string display = \"0\";\n    \n    /// <summary>\n    /// Gets or sets the current display value of the calculator.\n    /// </summary>\n    /// <value>\n    /// The string representation of the current calculator display.\n    /// </value>\n    /// <remarks>\n    /// Implements property change notification for data binding.\n    /// </remarks>\n    public string Display\n    {\n        get => this.display;\n        set\n        {\n            if (this.display != value)\n            {\n                this.display = value;\n                OnPropertyChanged();\n            }\n        }\n    }\n\n    /// <summary>\n    /// Command for handling digit button presses (0-9).\n    /// </summary>\n    public ICommand DigitCommand { get; }\n    \n    /// <summary>\n    /// Command for handling arithmetic operator button presses (+, -, *, /, =).\n    /// </summary>\n    public ICommand OperatorCommand { get; }\n    \n    /// <summary>\n    /// Command for handling the clear (C) button press.\n    /// </summary>\n    public ICommand ClearCommand { get; }\n    \n    /// <summary>\n    /// Command for handling special service operations (decimal point, sign change, percentage).\n    /// </summary>\n    public ICommand ServiceCommand { get; }\n\n    /// <summary>\n    /// Initializes a new instance of the MainWindowViewModel class.\n    /// </summary>\n    /// <remarks>\n    /// Sets up all command handlers and initializes calculator state.\n    /// </remarks>\n    public MainWindowViewModel()\n    {\n        DigitCommand = new RelayCommand(param =>\n        {\n            this.calculator.AddDigit(param.ToString()[0]);\n            this.Display = calculator.GetDisplay();\n        });\n\n        OperatorCommand = new RelayCommand(param =>\n        {\n            this.calculator.SetOperator(param.ToString()[0]);\n            this.Display = calculator.GetDisplay();\n        });\n\n        ClearCommand = new RelayCommand(_ =>\n        {\n            this.calculator.Clear();\n            this.Display = calculator.GetDisplay();\n        });\n\n        ServiceCommand = new RelayCommand(param =>\n        {\n            this.calculator.SetServiceOperator(param.ToString());\n            this.Display = calculator.GetDisplay();\n        });\n    }\n\n    /// <summary>\n    /// Occurs when a property value changes.\n    /// </summary>\n    public event PropertyChangedEventHandler? PropertyChanged;\n    \n    /// <summary>\n    /// Raises the PropertyChanged event.\n    /// </summary>\n    /// <param name=\"name\">The name of the property that changed.</param>\n    /// <remarks>\n    /// Uses CallerMemberName attribute to automatically get property name if not specified.\n    /// </remarks>\n    private void OnPropertyChanged([CallerMemberName] string? name = null) =>\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));\n}"
  },
  {
    "name": "calculator.csproj",
    "extension": "csproj",
    "is_binary": false,
    "path": "HW8/calculator/calculator/calculator/calculator.csproj",
    "content": "﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net9.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n\n    <ItemGroup>\n      <PackageReference Include=\"Avalonia\" Version=\"11.3.0\" />\n      <PackageReference Include=\"Avalonia.Desktop\" Version=\"11.3.0\" />\n      <PackageReference Include=\"Avalonia.ReactiveUI\" Version=\"11.3.0\" />\n      <PackageReference Include=\"Avalonia.Themes.Fluent\" Version=\"11.3.0\" />\n    </ItemGroup>\n\n</Project>\n"
  },
  {
    "name": "Tests.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "HW8/calculator/calculator/сalculator.Tests/Tests.cs",
    "content": "﻿// <copyright file=\"SparseVector.cs\" company=\"Mikhail Kharlamov\">\n// Copyright (c) Mikhail Kharlamov. All rights reserved.\n// </copyright>\n\nnamespace Calculator.Tests;\n\nusing Calculator;\n\npublic class Tests\n{\n    private CalculatorLogic calculator;\n\n    [SetUp]\n    public void Setup()\n    {\n        this.calculator = new CalculatorLogic();\n    }\n\n    [Test]\n    public void CalculatorLogicSimpleArithmeticTest()\n    {\n        this.calculator.AddDigit('2');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"2\"));\n        this.calculator.AddDigit('3');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"23\"));\n        this.calculator.SetOperator('+');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"23\"));\n        this.calculator.AddDigit('3');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"3\"));\n        this.calculator.SetOperator('-');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"26\"));\n        this.calculator.AddDigit('5');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"5\"));\n        this.calculator.SetOperator('/');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"21\"));\n        this.calculator.AddDigit('3');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"3\"));\n        this.calculator.SetOperator('*');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"7\"));\n        this.calculator.AddDigit('2');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"2\"));\n        this.calculator.SetOperator('=');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"14\"));\n    }\n}"
  },
  {
    "name": "сalculator.Tests.csproj",
    "extension": "csproj",
    "is_binary": false,
    "path": "HW8/calculator/calculator/сalculator.Tests/сalculator.Tests.csproj",
    "content": "﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <TargetFramework>net9.0</TargetFramework>\n        <LangVersion>latest</LangVersion>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n        <IsPackable>false</IsPackable>\n        <RootNamespace>Calculator.Tests</RootNamespace>\n    </PropertyGroup>\n\n    <ItemGroup>\n        <PackageReference Include=\"Avalonia\" Version=\"11.3.0\" />\n        <PackageReference Include=\"coverlet.collector\" Version=\"6.0.2\"/>\n        <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\"/>\n        <PackageReference Include=\"NUnit\" Version=\"4.2.2\"/>\n        <PackageReference Include=\"NUnit.Analyzers\" Version=\"4.4.0\"/>\n        <PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.6.0\"/>\n    </ItemGroup>\n\n    <ItemGroup>\n        <Using Include=\"NUnit.Framework\"/>\n    </ItemGroup>\n\n    <ItemGroup>\n      <ProjectReference Include=\"..\\calculator\\calculator.csproj\" />\n    </ItemGroup>\n\n</Project>\n"
  }
]