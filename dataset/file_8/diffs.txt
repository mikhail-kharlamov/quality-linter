diff --git 

diff --git a/Lazy/Lazy.sln b/Lazy/Lazy.sln
new file mode 100644
index 0000000..4a2aa11
--- /dev/null
+++ b/Lazy/Lazy.sln
@@ -0,0 +1,28 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.0.31903.59
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Lazy", "Lazy\Lazy.csproj", "{D0AD709E-DFA6-4AFE-87DC-E9B041BD14A8}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "LazyTests", "LazyTests\LazyTests.csproj", "{67B3804B-AAE8-425A-BC51-FEDB97E4DC50}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{D0AD709E-DFA6-4AFE-87DC-E9B041BD14A8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{D0AD709E-DFA6-4AFE-87DC-E9B041BD14A8}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{D0AD709E-DFA6-4AFE-87DC-E9B041BD14A8}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{D0AD709E-DFA6-4AFE-87DC-E9B041BD14A8}.Release|Any CPU.Build.0 = Release|Any CPU
+		{67B3804B-AAE8-425A-BC51-FEDB97E4DC50}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{67B3804B-AAE8-425A-BC51-FEDB97E4DC50}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{67B3804B-AAE8-425A-BC51-FEDB97E4DC50}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{67B3804B-AAE8-425A-BC51-FEDB97E4DC50}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+EndGlobal


diff --git a/Lazy/Lazy/GlobalSuppressions.cs b/Lazy/Lazy/GlobalSuppressions.cs
new file mode 100644
index 0000000..bf4038d
--- /dev/null
+++ b/Lazy/Lazy/GlobalSuppressions.cs
@@ -0,0 +1,10 @@
+// Copyright (c) 2024
+//
+// Use of this source code is governed by an MIT license
+// that can be found in the LICENSE file or at
+// https://opensource.org/licenses/MIT.
+
+using System.Diagnostics.CodeAnalysis;
+
+[assembly: SuppressMessage("StyleCop.CSharp.SpacingRules", "SA1009:Closing parenthesis should be spaced correctly", Justification = "Reviewed", Scope = "type", Target = "~T:Lazy.SingleThreadLazy`1")]
+[assembly: SuppressMessage("StyleCop.CSharp.SpacingRules", "SA1009:Closing parenthesis should be spaced correctly", Justification = "Reviewed", Scope = "type", Target = "~T:Lazy.MultiThreadLazy`1")]


diff --git a/Lazy/Lazy/ILazy.cs b/Lazy/Lazy/ILazy.cs
new file mode 100644
index 0000000..327d92e
--- /dev/null
+++ b/Lazy/Lazy/ILazy.cs
@@ -0,0 +1,20 @@
+﻿// Copyright (c) 2024
+//
+// Use of this source code is governed by an MIT license
+// that can be found in the LICENSE file or at
+// https://opensource.org/licenses/MIT.
+
+namespace Lazy;
+
+/// <summary>
+/// Provides support for lazy evalution.
+/// </summary>
+/// <typeparam name="T">Type of the result of evalution.</typeparam>
+public interface ILazy<T>
+{
+    /// <summary>
+    /// Gets evaluated result. Evaluation happens just once.
+    /// </summary>
+    /// <returns>Result of the lazy evaluation.</returns>
+    public T? Get();
+}


diff --git a/Lazy/Lazy/Lazy.csproj b/Lazy/Lazy/Lazy.csproj
new file mode 100644
index 0000000..4b0d0b0
--- /dev/null
+++ b/Lazy/Lazy/Lazy.csproj
@@ -0,0 +1,21 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net8.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="StyleCop.Analyzers" Version="1.1.118">
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+      <PrivateAssets>all</PrivateAssets>
+    </PackageReference>
+  </ItemGroup>
+
+  <ItemGroup>
+    <AdditionalFiles Include="..\stylecop.json" />
+  </ItemGroup>
+
+
+</Project>


diff --git a/Lazy/Lazy/MultiThreadLazy.cs b/Lazy/Lazy/MultiThreadLazy.cs
new file mode 100644
index 0000000..e411492
--- /dev/null
+++ b/Lazy/Lazy/MultiThreadLazy.cs
@@ -0,0 +1,65 @@
+// Copyright (c) 2024
+//
+// Use of this source code is governed by an MIT license
+// that can be found in the LICENSE file or at
+// https://opensource.org/licenses/MIT.
+
+namespace Lazy;
+
+/// <summary>
+/// Implements Multi-thread lazy evaluation.
+/// </summary>
+/// <typeparam name="T">Type of the result of evalution.</typeparam>
+/// <param name="supplier">Function to evaluate.</param>
+public class MultiThreadLazy<T>(Func<T> supplier) : ILazy<T>
+{
+    private readonly Semaphore semaphore = new (1, 1);
+    private Func<T>? supplier = supplier;
+    private T? result;
+    private Exception? exception;
+
+    private bool isReady;
+
+    /// <inheritdoc/>
+    public T? Get()
+    {
+        if (this.exception != null)
+        {
+            throw this.exception;
+        }
+
+        if (!this.isReady)
+        {
+            this.semaphore.WaitOne();
+            if (!this.isReady)
+            {
+                try
+                {
+                    if (this.supplier is null)
+                    {
+                        throw new InvalidOperationException("Supplier is null");
+                    }
+
+                    this.result = this.supplier();
+                }
+                catch (Exception e)
+                {
+                    this.exception = e;
+                    throw;
+                }
+                finally
+                {
+                    this.supplier = null;
+                    this.isReady = true;
+                    this.semaphore.Release();
+                }
+            }
+            else
+            {
+                this.semaphore.Release();
+            }
+        }
+
+        return this.result;
+    }
+}


diff --git a/Lazy/Lazy/SingleThreadLazy.cs b/Lazy/Lazy/SingleThreadLazy.cs
new file mode 100644
index 0000000..9a7f73b
--- /dev/null
+++ b/Lazy/Lazy/SingleThreadLazy.cs
@@ -0,0 +1,49 @@
+// Copyright (c) 2024
+//
+// Use of this source code is governed by an MIT license
+// that can be found in the LICENSE file or at
+// https://opensource.org/licenses/MIT.
+
+namespace Lazy;
+
+/// <summary>
+/// Implements single-thread lazy evaluation.
+/// </summary>
+/// <typeparam name="T">Type of the result of evaluation.</typeparam>
+/// <param name="supplier">Funciton to evaluate.</param>
+public class SingleThreadLazy<T>(Func<T> supplier) : ILazy<T>
+{
+    private Func<T>? supplier = supplier;
+    private T? result;
+    private bool isReady;
+    private Exception? exception;
+
+    /// <inheritdoc/>
+    public T? Get()
+    {
+        if (!this.isReady)
+        {
+            try
+            {
+                if (this.supplier is null)
+                {
+                    throw new InvalidOperationException("Supplier is null!");
+                }
+
+                this.result = this.supplier();
+            }
+            catch (Exception e)
+            {
+                this.exception = e;
+                throw;
+            }
+            finally
+            {
+                this.supplier = null;
+                this.isReady = true;
+            }
+        }
+
+        return this.result;
+    }
+}


diff --git a/Lazy/LazyTests/GlobalUsings.cs b/Lazy/LazyTests/GlobalUsings.cs
new file mode 100644
index 0000000..07e2c90
--- /dev/null
+++ b/Lazy/LazyTests/GlobalUsings.cs
@@ -0,0 +1,5 @@
+// <copyright file="GlobalUsings.cs" company="PlaceholderCompany">
+// Copyright (c) PlaceholderCompany. All rights reserved.
+// </copyright>
+
+global using NUnit.Framework;
\ No newline at end of file


diff --git a/Lazy/LazyTests/LazyTests.cs b/Lazy/LazyTests/LazyTests.cs
new file mode 100644
index 0000000..05d3b9a
--- /dev/null
+++ b/Lazy/LazyTests/LazyTests.cs
@@ -0,0 +1,94 @@
+// <copyright file="LazyTests.cs" company="PlaceholderCompany">
+// Copyright (c) PlaceholderCompany. All rights reserved.
+// </copyright>
+
+namespace Lazy.Tests;
+
+public class Tests
+{
+    private static int supplierRunsCounter = 1;
+
+    private static int expectedValue = 100;
+
+    private static IEnumerable<TestCaseData> Lazies()
+    {
+        yield return new TestCaseData(new SingleThreadLazy<int>(() => expectedValue));
+        yield return new TestCaseData(new MultiThreadLazy<int>(() => expectedValue));
+    }
+
+    private static IEnumerable<TestCaseData> LaziesCountRuns()
+    {
+        yield return new TestCaseData(new SingleThreadLazy<int>(() => supplierRunsCounter++));
+        yield return new TestCaseData(new MultiThreadLazy<int>(() => supplierRunsCounter++));
+    }
+
+    private static IEnumerable<TestCaseData> LaziesThrowException()
+    {
+        Func<int> supplier = () =>
+        {
+            return 1 / (Environment.ProcessId - Environment.ProcessId);
+        };
+
+        yield return new TestCaseData(new SingleThreadLazy<int>(supplier));
+        yield return new TestCaseData(new MultiThreadLazy<int>(supplier));
+    }
+
+    [TestCaseSource(nameof(Lazies))]
+    public void GetShouldReturnExpectedValue(ILazy<int> lazy)
+    {
+        Assert.That(lazy.Get(), Is.EqualTo(expectedValue));
+    }
+
+    [TestCaseSource(nameof(LaziesCountRuns))]
+    public void GetSeveralTimesSupplierShouldBeCalledOnce(ILazy<int> lazy)
+    {
+        var firstRun = lazy.Get();
+        var secondRun = lazy.Get();
+        var thirdRun = lazy.Get();
+        Assert.Multiple(() =>
+        {
+            Assert.That(firstRun, Is.EqualTo(secondRun));
+            Assert.That(secondRun, Is.EqualTo(thirdRun));
+        });
+    }
+
+    [TestCaseSource(nameof(LaziesThrowException))]
+    public void GetSupplierThrowsExceptionShouldRethrowThatException(ILazy<int> lazy)
+    {
+        Assert.Throws<DivideByZeroException>(() => lazy.Get());
+    }
+
+    [Test]
+    public void GetMultiThreadShouldReturnCorrectValue()
+    {
+        var expectedResult = 10;
+        var initial = 0;
+        MultiThreadLazy<int> lazy = new (() => initial += 10);
+        var numberOfThreads = 10;
+        var threads = new Thread[numberOfThreads];
+        var results = new int[numberOfThreads];
+        var manualResetEvent = new ManualResetEvent(false);
+        for (int i = 0; i < threads.Length; ++i)
+        {
+            var localI = i;
+            threads[i] = new (() => {
+                manualResetEvent.WaitOne();
+                results[localI] = lazy.Get();
+            });
+        }
+
+        foreach (var thread in threads)
+        {
+            thread.Start();
+        }
+
+        manualResetEvent.Set();
+
+        foreach (var thread in threads)
+        {
+            thread.Join();
+        }
+
+        Assert.That(results.All(x => x == expectedResult), Is.True);
+    }
+}
\ No newline at end of file


diff --git a/Lazy/LazyTests/LazyTests.csproj b/Lazy/LazyTests/LazyTests.csproj
new file mode 100644
index 0000000..c30087d
--- /dev/null
+++ b/Lazy/LazyTests/LazyTests.csproj
@@ -0,0 +1,24 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net8.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+
+    <IsPackable>false</IsPackable>
+    <IsTestProject>true</IsTestProject>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.6.0" />
+    <PackageReference Include="NUnit" Version="3.13.3" />
+    <PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />
+    <PackageReference Include="NUnit.Analyzers" Version="3.6.1" />
+    <PackageReference Include="coverlet.collector" Version="6.0.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\Lazy\Lazy.csproj" />
+  </ItemGroup>
+
+</Project>


diff --git a/Lazy/stylecop.json b/Lazy/stylecop.json
new file mode 100644
index 0000000..99e8442
--- /dev/null
+++ b/Lazy/stylecop.json
@@ -0,0 +1,17 @@
+{
+    "$schema": "https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json",
+    "settings": {
+      "documentationRules": {
+        "copyrightText": "Copyright (c) 2024\n\nUse of this source code is governed by an MIT license\nthat can be found in the LICENSE file or at\nhttps://opensource.org/licenses/MIT.",
+        "xmlHeader": false,
+        "documentExposedElements": false
+      },
+      "layoutRules": {
+        "newlineAtEndOfFile": "require"
+      },
+      "indentation": {
+        "indentationSize": 4,
+        "useTabs": false
+      }
+    }
+}
\ No newline at end of file
