diff --git 

diff --git a/CW2/Button/App.axaml b/CW2/Button/App.axaml
new file mode 100644
index 0000000..1b42edb
--- /dev/null
+++ b/CW2/Button/App.axaml
@@ -0,0 +1,11 @@
+<Application 
+    xmlns="https://github.com/avaloniaui"
+    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+    xmlns:fluent="clr-namespace:Avalonia.Themes.Fluent;assembly=Avalonia.Themes.Fluent"
+    x:Class="Button.App">
+
+    <Application.Styles>
+        <fluent:FluentTheme />
+    </Application.Styles>
+
+</Application>


diff --git a/CW2/Button/App.axaml.cs b/CW2/Button/App.axaml.cs
new file mode 100644
index 0000000..400e5a8
--- /dev/null
+++ b/CW2/Button/App.axaml.cs
@@ -0,0 +1,23 @@
+using Avalonia;
+using Avalonia.Controls.ApplicationLifetimes;
+using Avalonia.Markup.Xaml;
+
+namespace Button;
+
+public partial class App : Application
+{
+    public override void Initialize()
+    {
+        AvaloniaXamlLoader.Load(this);
+    }
+
+    public override void OnFrameworkInitializationCompleted()
+    {
+        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
+        {
+            desktop.MainWindow = new MainWindow();
+        }
+
+        base.OnFrameworkInitializationCompleted();
+    }
+}


diff --git a/CW2/Button/Button.csproj b/CW2/Button/Button.csproj
new file mode 100644
index 0000000..804986a
--- /dev/null
+++ b/CW2/Button/Button.csproj
@@ -0,0 +1,17 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+
+    <PropertyGroup>
+        <OutputType>Exe</OutputType>
+        <TargetFramework>net9.0</TargetFramework>
+        <ImplicitUsings>enable</ImplicitUsings>
+        <Nullable>enable</Nullable>
+    </PropertyGroup>
+
+    <ItemGroup>
+      <PackageReference Include="Avalonia" Version="11.3.0" />
+      <PackageReference Include="Avalonia.Desktop" Version="11.3.0" />
+      <PackageReference Include="Avalonia.ReactiveUI" Version="11.3.0" />
+      <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.0" />
+    </ItemGroup>
+
+</Project>


diff --git a/CW2/Button/MainWindow.axaml b/CW2/Button/MainWindow.axaml
new file mode 100644
index 0000000..1ba9f5e
--- /dev/null
+++ b/CW2/Button/MainWindow.axaml
@@ -0,0 +1,15 @@
+<Window xmlns="https://github.com/avaloniaui"
+        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
+        x:Class="Button.MainWindow"
+        Title="Убегающая кнопка"
+        Width="800" Height="600">
+
+    <Canvas x:Name="MainCanvas"
+            PointerMoved="MovedOnButton">
+        <Button x:Name="EscapeButton"
+                Width="100" Height="40"
+                Content="Нажми меня!"
+                Canvas.Left="100" Canvas.Top="100"
+                PointerPressed="ButtonPressed" />
+    </Canvas>
+</Window>


diff --git a/CW2/Button/MainWindow.axaml.cs b/CW2/Button/MainWindow.axaml.cs
new file mode 100644
index 0000000..b4653e9
--- /dev/null
+++ b/CW2/Button/MainWindow.axaml.cs
@@ -0,0 +1,91 @@
+using Avalonia.Controls;
+using Avalonia.Interactivity;
+using Avalonia.Input;
+
+namespace Button;
+
+/// <summary>
+/// Class for handling actions.
+/// </summary>>
+public partial class MainWindow : Window
+{
+    
+    private double escapeDistance = 50;
+
+    /// <summary>
+    /// Constructor.
+    /// </summary>>
+    public MainWindow()
+    {
+        InitializeComponent();
+        this.SizeChanged += this.WindowSizeChanged;
+    }
+
+    /// <summary>
+    /// Method for handling actions if cursor near the button.
+    /// </summary>>
+    /// <param name="sender">The control that raised the event.</param>\
+    /// /// <param name="e">Provides data about the pointer movement, including current position.</param>
+    private void MovedOnButton(object? sender, PointerEventArgs e)
+    {
+        var buttonX = Canvas.GetLeft(EscapeButton) + EscapeButton.Bounds.Width / 2;
+        var buttonY = Canvas.GetTop(EscapeButton) + EscapeButton.Bounds.Height / 2;
+        var mouse = e.GetPosition(MainCanvas);
+
+        var distance = Math.Sqrt(Math.Pow(mouse.X - buttonX, 2) + Math.Pow(mouse.Y - buttonY, 2));
+        if (distance < this.escapeDistance)
+        {
+            this.SetNewPosition(mouse.X, mouse.Y);
+        }
+    }
+    
+    /// <summary>
+    /// Method for handling actions if the button is pressed.
+    /// </summary>>
+    /// <param name="sender">The control that that was pressed.</param>\
+    /// /// <param name="e">Provides data about the pointer press event.</param>
+    private void ButtonPressed(object? sender, RoutedEventArgs e)
+    {
+        Close();
+    }
+
+    /// <summary>
+    /// Method for handling actions if window size is changed.
+    /// </summary>>
+    /// <param name="sender">The window whose size has changed.</param>\
+    /// /// <param name="e">Provides information about the new size of the window.</param>
+    private void WindowSizeChanged(object? sender, SizeChangedEventArgs e)
+    {
+        if (EscapeButton.Bounds.Width + Canvas.GetLeft(EscapeButton) > this.Width)
+        {
+            Canvas.SetLeft(EscapeButton, this.Width - EscapeButton.Bounds.Width);
+        }
+
+        if (EscapeButton.Bounds.Height + Canvas.GetTop(EscapeButton) > this.Height)
+        {
+            Canvas.SetTop(EscapeButton, this.Height - EscapeButton.Bounds.Height);
+        }
+    }
+
+    /// <summary>
+    /// Method for setting the button position.
+    /// </summary>>
+    /// <param name="mouseX">The X coordinate of the mouse.</param>\
+    /// /// <param name="mouseY">The Y coordinate of the mouse.</param>
+    private void SetNewPosition(double mouseX, double mouseY)
+    {
+        var random = new Random();
+        var x = random.NextDouble() * (MainCanvas.Bounds.Width - EscapeButton.Bounds.Width);
+        var y = random.NextDouble() * (MainCanvas.Bounds.Height - EscapeButton.Bounds.Height);
+        while (mouseX < x + EscapeButton.Bounds.Width / 2 && mouseX
+               > x - EscapeButton.Bounds.Width / 2 && mouseY < y + EscapeButton.Bounds.Height / 2
+               && mouseY > y + EscapeButton.Bounds.Height / 2)
+        {
+            x = random.NextDouble() * (MainCanvas.Bounds.Width - EscapeButton.Bounds.Width);
+            y = random.NextDouble() * (MainCanvas.Bounds.Height - EscapeButton.Bounds.Height);
+        }
+
+        Canvas.SetLeft(EscapeButton, x);
+        Canvas.SetTop(EscapeButton, y);
+    }
+}


diff --git a/CW2/Button/Program.cs b/CW2/Button/Program.cs
new file mode 100644
index 0000000..2da9167
--- /dev/null
+++ b/CW2/Button/Program.cs
@@ -0,0 +1,16 @@
+﻿using Avalonia;
+
+namespace Button;
+
+internal class Program
+{
+    [STAThread]
+    public static void Main(string[] args) =>
+        BuildAvaloniaApp()
+            .StartWithClassicDesktopLifetime(args);
+
+    private static AppBuilder BuildAvaloniaApp()
+        => AppBuilder.Configure<App>()
+            .UsePlatformDetect()
+            .LogToTrace();
+}
