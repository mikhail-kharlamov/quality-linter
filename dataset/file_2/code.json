[
  {
    "name": "App.axaml.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "CW2/Button/App.axaml.cs",
    "content": "using Avalonia;\nusing Avalonia.Controls.ApplicationLifetimes;\nusing Avalonia.Markup.Xaml;\n\nnamespace Button;\n\npublic partial class App : Application\n{\n    public override void Initialize()\n    {\n        AvaloniaXamlLoader.Load(this);\n    }\n\n    public override void OnFrameworkInitializationCompleted()\n    {\n        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)\n        {\n            desktop.MainWindow = new MainWindow();\n        }\n\n        base.OnFrameworkInitializationCompleted();\n    }\n}\n"
  },
  {
    "name": "Button.csproj",
    "extension": "csproj",
    "is_binary": false,
    "path": "CW2/Button/Button.csproj",
    "content": "ï»¿<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net9.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>\n\n    <ItemGroup>\n      <PackageReference Include=\"Avalonia\" Version=\"11.3.0\" />\n      <PackageReference Include=\"Avalonia.Desktop\" Version=\"11.3.0\" />\n      <PackageReference Include=\"Avalonia.ReactiveUI\" Version=\"11.3.0\" />\n      <PackageReference Include=\"Avalonia.Themes.Fluent\" Version=\"11.3.0\" />\n    </ItemGroup>\n\n</Project>\n"
  },
  {
    "name": "MainWindow.axaml.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "CW2/Button/MainWindow.axaml.cs",
    "content": "using Avalonia.Controls;\nusing Avalonia.Interactivity;\nusing Avalonia.Input;\n\nnamespace Button;\n\n/// <summary>\n/// Class for handling actions.\n/// </summary>>\npublic partial class MainWindow : Window\n{\n    \n    private double escapeDistance = 50;\n\n    /// <summary>\n    /// Constructor.\n    /// </summary>>\n    public MainWindow()\n    {\n        InitializeComponent();\n        this.SizeChanged += this.WindowSizeChanged;\n    }\n\n    /// <summary>\n    /// Method for handling actions if cursor near the button.\n    /// </summary>>\n    /// <param name=\"sender\">The control that raised the event.</param>\\\n    /// /// <param name=\"e\">Provides data about the pointer movement, including current position.</param>\n    private void MovedOnButton(object? sender, PointerEventArgs e)\n    {\n        var buttonX = Canvas.GetLeft(EscapeButton) + EscapeButton.Bounds.Width / 2;\n        var buttonY = Canvas.GetTop(EscapeButton) + EscapeButton.Bounds.Height / 2;\n        var mouse = e.GetPosition(MainCanvas);\n\n        var distance = Math.Sqrt(Math.Pow(mouse.X - buttonX, 2) + Math.Pow(mouse.Y - buttonY, 2));\n        if (distance < this.escapeDistance)\n        {\n            this.SetNewPosition(mouse.X, mouse.Y);\n        }\n    }\n    \n    /// <summary>\n    /// Method for handling actions if the button is pressed.\n    /// </summary>>\n    /// <param name=\"sender\">The control that that was pressed.</param>\\\n    /// /// <param name=\"e\">Provides data about the pointer press event.</param>\n    private void ButtonPressed(object? sender, RoutedEventArgs e)\n    {\n        Close();\n    }\n\n    /// <summary>\n    /// Method for handling actions if window size is changed.\n    /// </summary>>\n    /// <param name=\"sender\">The window whose size has changed.</param>\\\n    /// /// <param name=\"e\">Provides information about the new size of the window.</param>\n    private void WindowSizeChanged(object? sender, SizeChangedEventArgs e)\n    {\n        if (EscapeButton.Bounds.Width + Canvas.GetLeft(EscapeButton) > this.Width)\n        {\n            Canvas.SetLeft(EscapeButton, this.Width - EscapeButton.Bounds.Width);\n        }\n\n        if (EscapeButton.Bounds.Height + Canvas.GetTop(EscapeButton) > this.Height)\n        {\n            Canvas.SetTop(EscapeButton, this.Height - EscapeButton.Bounds.Height);\n        }\n    }\n\n    /// <summary>\n    /// Method for setting the button position.\n    /// </summary>>\n    /// <param name=\"mouseX\">The X coordinate of the mouse.</param>\\\n    /// /// <param name=\"mouseY\">The Y coordinate of the mouse.</param>\n    private void SetNewPosition(double mouseX, double mouseY)\n    {\n        var random = new Random();\n        var x = random.NextDouble() * (MainCanvas.Bounds.Width - EscapeButton.Bounds.Width);\n        var y = random.NextDouble() * (MainCanvas.Bounds.Height - EscapeButton.Bounds.Height);\n        while (mouseX < x + EscapeButton.Bounds.Width / 2 && mouseX\n               > x - EscapeButton.Bounds.Width / 2 && mouseY < y + EscapeButton.Bounds.Height / 2\n               && mouseY > y + EscapeButton.Bounds.Height / 2)\n        {\n            x = random.NextDouble() * (MainCanvas.Bounds.Width - EscapeButton.Bounds.Width);\n            y = random.NextDouble() * (MainCanvas.Bounds.Height - EscapeButton.Bounds.Height);\n        }\n\n        Canvas.SetLeft(EscapeButton, x);\n        Canvas.SetTop(EscapeButton, y);\n    }\n}\n"
  }
]