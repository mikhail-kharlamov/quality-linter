[
  {
    "name": "Program.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "HW2/ConsoleApp1/ConsoleApp1/Program.cs",
    "content": "ï»¿// See https://aka.ms/new-console-template for more information\n\nConsole.WriteLine(\"Hello, World!\");"
  },
  {
    "name": "Trie.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "HW2/ConsoleApp1/ConsoleApp1/Trie.cs",
    "content": "namespace TrieDataStructure;\n\n/// <summary>\n/// Class of data structure Trie.\n/// </summary>>\npublic class Trie\n{\n    private Node _root = new Node();\n    \n    private int size { get; set; }\n    \n    /// <summary>\n    /// Adds element to the trie.\n    /// </summary>>\n    /// <param name=\"element\">Element to add.</param>\n    /// <returns>True if element hasn't been in trie before.</returns>\n    public bool Add(string element)\n    {\n        var node = this._root;\n        foreach (var letter in element)\n        {\n            if (!node.Children.ContainsKey(letter))\n            {\n                node.Children[letter] = new Node();\n            }\n            node = node.Children[letter];\n        }\n\n        if (node.IsTerminal)\n        {\n            return false;\n        }\n        node.IsTerminal = true;\n        this.size++;\n        return true;\n    }\n\n    /// <summary>\n    /// Checks is the element in trie.\n    /// </summary>>\n    /// <param name=\"element\">Element to check.</param>\n    /// <returns>True if element in trie.</returns>\n    public bool Contains(string element)\n    {\n        var node = this._root;\n        foreach (var letter in element)\n        {\n            if (!node.Children.ContainsKey(letter))\n            {\n                return false;\n            }\n            node = node.Children[letter];\n        }\n        return node.IsTerminal;\n    }\n\n    /// <summary>\n    /// Removes element from the trie.\n    /// </summary>>\n    /// <param name=\"element\">Element to remove.</param>\n    /// <returns>True if element really has been in trie.</returns>\n    public bool Remove(string element)\n    {\n        var (isElementInTree, isChildHasChildren) = DeleteRecursively(this._root, element, 0);\n        if (isElementInTree)\n        {\n            this.size--;\n        }\n        return isElementInTree;\n    }\n\n    private (bool, bool) DeleteRecursively(Node node, string element, int numberOfLetter)\n    {\n        if (node.IsTerminal && node.Children.Count == 0 && element.Length == numberOfLetter)\n        {\n            return (true, false);\n        }\n        if (node.IsTerminal && element.Length == numberOfLetter)\n        {\n            node.IsTerminal = false;\n            return (true, true);\n        } \n        if (node.Children.Count == 0 && element.Length == numberOfLetter)\n        {\n            return (false, false);\n        }\n        var letter = element[numberOfLetter];\n        var children = node.Children[letter];\n        var (isElementInTree, isChildHasChildren) = DeleteRecursively(children, element, numberOfLetter + 1);\n        if (!isElementInTree)\n        {\n            return (false, false);\n        }\n\n        if (!isChildHasChildren)\n        {\n            node.Children.Remove(element[numberOfLetter]);\n        }\n        return (isElementInTree, node.Children.Count != 0);\n    }\n    \n    /// <summary>\n    /// Counts how many elements starts with prefix.\n    /// </summary>>\n    /// <param name=\"prefix\">Prefix for counting words.</param>\n    /// <returns>Count of elements that starts with this prefix.</returns>\n    public int HowManyStartsWithPrefix(string prefix)\n    {\n        var node = this._root;\n        foreach (var letter in prefix)\n        {\n            if (!node.Children.ContainsKey(letter))\n            {\n                return 0;\n            }\n            node = node.Children[letter];\n        }\n\n        var count =  PrefixCounterRecursively(node);\n        if (node.IsTerminal)\n        {\n            count++;\n        }\n        return count;\n    }\n\n    private int PrefixCounterRecursively(Node node)\n    {\n        if (node.Children.Count == 0)\n        {\n            return node.IsTerminal? 1 : 0;\n        }\n\n        var counter = 0;\n        foreach (var childNode in node.Children.Values)\n        {\n            counter += PrefixCounterRecursively(childNode);\n        }\n        return counter;\n    }\n    \n    /// <summary>\n    /// Checks the size of the trie.\n    /// </summary>>\n    /// <returns>How many elements in trie.</returns>\n    public int Size()\n    {\n        return this.size;\n    }\n\n    private class Node\n    {\n        public bool IsTerminal { set; get; }\n        public Dictionary<char, Node> Children { get; } = new();\n    }\n}"
  }
]