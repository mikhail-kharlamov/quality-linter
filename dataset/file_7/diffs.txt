diff --git 

diff --git a/MyThreadPool/MyThreadPool.sln b/MyThreadPool/MyThreadPool.sln
new file mode 100644
index 0000000..16ddc4a
--- /dev/null
+++ b/MyThreadPool/MyThreadPool.sln
@@ -0,0 +1,28 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 17
+VisualStudioVersion = 17.0.31903.59
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyThreadPool", "MyThreadPool\MyThreadPool.csproj", "{8370ABFE-8A68-446E-98DB-9EBF92C7D0F3}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MyThreadPoolTests", "MyThreadPoolTests\MyThreadPoolTests.csproj", "{1A8DB311-6435-4742-A61D-2C39CE7A6FC3}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{8370ABFE-8A68-446E-98DB-9EBF92C7D0F3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{8370ABFE-8A68-446E-98DB-9EBF92C7D0F3}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{8370ABFE-8A68-446E-98DB-9EBF92C7D0F3}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{8370ABFE-8A68-446E-98DB-9EBF92C7D0F3}.Release|Any CPU.Build.0 = Release|Any CPU
+		{1A8DB311-6435-4742-A61D-2C39CE7A6FC3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{1A8DB311-6435-4742-A61D-2C39CE7A6FC3}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{1A8DB311-6435-4742-A61D-2C39CE7A6FC3}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{1A8DB311-6435-4742-A61D-2C39CE7A6FC3}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+EndGlobal


diff --git a/MyThreadPool/MyThreadPool/GlobalSuppressions.cs b/MyThreadPool/MyThreadPool/GlobalSuppressions.cs
new file mode 100644
index 0000000..cc89091
--- /dev/null
+++ b/MyThreadPool/MyThreadPool/GlobalSuppressions.cs
@@ -0,0 +1,9 @@
+// Copyright (c) 2024
+//
+// Use of this source code is governed by an MIT license
+// that can be found in the LICENSE file or at
+// https://opensource.org/licenses/MIT.
+
+using System.Diagnostics.CodeAnalysis;
+
+[assembly: SuppressMessage("StyleCop.CSharp.SpacingRules", "SA1009:Closing parenthesis should be spaced correctly", Justification = "Reviewed", Scope = "type", Target = "~T:MyThreadPool.MyThreadPool.MyTask`1")]


diff --git a/MyThreadPool/MyThreadPool/IMyTask.cs b/MyThreadPool/MyThreadPool/IMyTask.cs
new file mode 100644
index 0000000..f17f565
--- /dev/null
+++ b/MyThreadPool/MyThreadPool/IMyTask.cs
@@ -0,0 +1,32 @@
+// Copyright (c) 2024
+//
+// Use of this source code is governed by an MIT license
+// that can be found in the LICENSE file or at
+// https://opensource.org/licenses/MIT.
+
+namespace MyThreadPool;
+
+/// <summary>
+/// Represents an asynchronous evaluation.
+/// </summary>
+/// <typeparam name="TResult">Type of the result of the evaluation.</typeparam>
+public interface IMyTask<TResult>
+{
+    /// <summary>
+    /// Gets a value indicating whether evaluation is complete.
+    /// </summary>
+    public bool IsCompleted { get; }
+
+    /// <summary>
+    /// Gets the result of the evaluation.
+    /// </summary>
+    public TResult? Result { get; }
+
+    /// <summary>
+    /// Creates a continuation that shares cancelation token and executes asynchronously when the target Task completes.
+    /// </summary>
+    /// <typeparam name="TNewResult">Type of the result of the continuation.</typeparam>
+    /// <param name="func">Continaution to evaluate.</param>
+    /// <returns>Task containing continuation.</returns>
+    public IMyTask<TNewResult> ContinueWith<TNewResult>(Func<TResult?, TNewResult?> func);
+}


diff --git a/MyThreadPool/MyThreadPool/MyThreadPool.cs b/MyThreadPool/MyThreadPool/MyThreadPool.cs
new file mode 100644
index 0000000..6b58f04
--- /dev/null
+++ b/MyThreadPool/MyThreadPool/MyThreadPool.cs
@@ -0,0 +1,224 @@
+﻿// Copyright (c) 2024
+//
+// Use of this source code is governed by an MIT license
+// that can be found in the LICENSE file or at
+// https://opensource.org/licenses/MIT.
+
+namespace MyThreadPool;
+
+using System.Collections.Concurrent;
+
+/// <summary>
+/// Provides a pool of threads that can be used to execute tasks asynchronously.
+/// </summary>
+public class MyThreadPool : IDisposable
+{
+    private readonly ConcurrentQueue<Action> tasks = new ();
+    private readonly Thread[] threads;
+    private readonly CancellationTokenSource cancellationTokenSource = new ();
+    private readonly ManualResetEvent shutdownEvent = new (true);
+    private readonly AutoResetEvent wakeUpEvent = new (false);
+    private readonly ManualResetEvent cancelEvent = new (false);
+
+    /// <summary>
+    /// Initializes a new instance of the <see cref="MyThreadPool"/> class with specified number of running threads.
+    /// </summary>
+    /// <param name="numberOfThreads">Number of threads to be created inside MyThreadPool class.</param>
+    public MyThreadPool(int numberOfThreads)
+    {
+        if (numberOfThreads < 1)
+        {
+            throw new ArgumentException("number of threads must be postive number!", nameof(numberOfThreads));
+        }
+
+        this.ThreadsCount = numberOfThreads;
+        this.threads = new Thread[this.ThreadsCount];
+        for (var i = 0; i < this.ThreadsCount; ++i)
+        {
+            this.threads[i] = new (this.Worker);
+        }
+
+        foreach (var thread in this.threads)
+        {
+            thread.Start();
+        }
+    }
+
+    /// <summary>
+    /// Gets the number of threads that are currently running.
+    /// </summary>
+    public int ThreadsCount { get; private set; }
+
+    /// <summary>
+    /// Shuts down treadpool. All tasks that were submitted before shutdown will be completed.
+    /// </summary>
+    public void Shutdown()
+    {
+        lock (this.tasks)
+        {
+            if (this.cancellationTokenSource.IsCancellationRequested)
+            {
+                return;
+            }
+
+            this.cancellationTokenSource.Cancel();
+
+            this.cancelEvent.Set();
+            for (var i = 0; i < this.ThreadsCount; ++i)
+            {
+                this.threads[i].Join();
+            }
+        }
+    }
+
+    public void Dispose()
+    {
+        this.Shutdown();
+
+        this.shutdownEvent.Dispose();
+        this.wakeUpEvent.Dispose();
+        this.cancelEvent.Dispose();
+    }
+
+    /// <summary>
+    /// Queues the specified function to evaluate on the <see cref="MyThreadPool"/> and returns a <see cref="IMyTask<typeparamref name="T"/>"/> for that function.
+    /// </summary>
+    /// <typeparam name="T">Type of the result of the evaluation.</typeparam>
+    /// <param name="task">Functions to evaluate on <see cref="MyThreadPool"/>.</param>
+    /// <returns><see cref="IMyTask"/> for the given function.</returns>
+    public IMyTask<T> Submit<T>(Func<T> task)
+    {
+        if (this.cancellationTokenSource.IsCancellationRequested)
+        {
+            throw new OperationCanceledException("Threadpool was shut down!");
+        }
+
+        lock (this.tasks)
+        {
+            if (this.cancellationTokenSource.IsCancellationRequested)
+            {
+                throw new OperationCanceledException("Threadpool was shut down!");
+            }
+
+            var newMyTask = new MyTask<T>(this, task, this.cancellationTokenSource.Token, this.shutdownEvent);
+            this.tasks.Enqueue(newMyTask.Start);
+            this.wakeUpEvent.Set();
+
+            return newMyTask;
+        }
+    }
+
+    private void Worker()
+    {
+        while (!this.cancellationTokenSource.IsCancellationRequested)
+        {
+            WaitHandle.WaitAny([this.wakeUpEvent, this.cancelEvent]);
+            if (this.tasks.TryDequeue(out var task))
+            {
+                this.wakeUpEvent.Set();
+                task();
+            }
+        }
+    }
+
+    private class MyTask<TResult>(MyThreadPool threadPool, Func<TResult> func, CancellationToken cancellationToken, ManualResetEvent shutdownEvent) : IMyTask<TResult>
+    {
+        private readonly Func<TResult> func = func;
+        private readonly object lockObject = new ();
+        private readonly ManualResetEvent shutdownEvent = shutdownEvent;
+        private readonly Queue<Action> continueWithTasks = new ();
+        private readonly MyThreadPool threadPool = threadPool;
+        private readonly CancellationToken cancellationToken = cancellationToken;
+        private AggregateException? aggregateException;
+        private TResult? result;
+
+        public TResult? Result
+        {
+            get
+            {
+                if (!this.IsCompleted)
+                {
+                    if (this.cancellationToken.IsCancellationRequested)
+                    {
+                        throw new OperationCanceledException("Thread pool was shut down!");
+                    }
+
+                    this.Start();
+                }
+
+                if (this.aggregateException != null)
+                {
+                    throw this.aggregateException;
+                }
+
+                return this.result;
+            }
+            private set => this.result = value;
+        }
+
+        public bool IsCompleted { get; private set; }
+
+        public IMyTask<TNewResult> ContinueWith<TNewResult>(Func<TResult?, TNewResult?> func)
+        {
+            lock (this.threadPool.tasks)
+            {
+                if (this.cancellationToken.IsCancellationRequested)
+                {
+                    throw new OperationCanceledException("Threadpool was shut down!");
+                }
+
+                var newFunc = () => func(this.Result);
+                if (this.IsCompleted)
+                {
+                    return this.threadPool.Submit(newFunc);
+                }
+
+                var newMyTask = new MyTask<TNewResult>(this.threadPool, newFunc, this.cancellationToken, this.shutdownEvent) as IMyTask<TNewResult>;
+                this.continueWithTasks.Enqueue(() => this.threadPool.Submit(() => newMyTask.Result));
+
+                return newMyTask;
+            }
+        }
+
+        public void Start()
+        {
+            if (this.IsCompleted)
+            {
+                return;
+            }
+
+            lock (this.lockObject)
+            {
+                if (!this.IsCompleted)
+                {
+                    try
+                    {
+                        this.Result = this.func();
+                    }
+                    catch (Exception e)
+                    {
+                        this.aggregateException = new ("Task failed", e);
+                    }
+                    finally
+                    {
+                        this.IsCompleted = true;
+                        while (this.continueWithTasks.Count > 0)
+                        {
+                            if (this.continueWithTasks.TryDequeue(out var continueWithTask))
+                            {
+                                try
+                                {
+                                    continueWithTask();
+                                }
+                                catch (OperationCanceledException)
+                                {
+                                    break;
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+}


diff --git a/MyThreadPool/MyThreadPool/MyThreadPool.csproj b/MyThreadPool/MyThreadPool/MyThreadPool.csproj
new file mode 100644
index 0000000..db31a47
--- /dev/null
+++ b/MyThreadPool/MyThreadPool/MyThreadPool.csproj
@@ -0,0 +1,20 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net8.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="StyleCop.Analyzers" Version="1.1.118">
+      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
+      <PrivateAssets>all</PrivateAssets>
+    </PackageReference>
+  </ItemGroup>
+
+ <ItemGroup>
+    <AdditionalFiles Include="../stylecop.json" />
+ </ItemGroup>
+
+</Project>


diff --git a/MyThreadPool/MyThreadPoolTests/GlobalUsings.cs b/MyThreadPool/MyThreadPoolTests/GlobalUsings.cs
new file mode 100644
index 0000000..cefced4
--- /dev/null
+++ b/MyThreadPool/MyThreadPoolTests/GlobalUsings.cs
@@ -0,0 +1 @@
+global using NUnit.Framework;
\ No newline at end of file


diff --git a/MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.cs b/MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.cs
new file mode 100644
index 0000000..82106eb
--- /dev/null
+++ b/MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.cs
@@ -0,0 +1,210 @@
+// Copyright (c) 2024
+//
+// Use of this source code is governed by an MIT license
+// that can be found in the LICENSE file or at
+// https://opensource.org/licenses/MIT.
+
+namespace MyThreadPool.Tests;
+
+public class Tests
+{
+    private static readonly int numberOfThreads = 10;
+    private MyThreadPool threadPool = new(numberOfThreads);
+
+    [SetUp]
+    public void Setup()
+    {
+        threadPool = new(numberOfThreads);
+    }
+
+    [Test]
+    [TestCase(1)]
+    [TestCase(10)]
+    [TestCase(20)]
+    public void CheckIfThereIsExactlyNThreadsInPool(int n)
+    {
+        HashSet<Thread?> threads = [];
+        threadPool = new(n);
+        List<IMyTask<Thread>> tasks = [];
+        ManualResetEvent manualResetEvent = new(false);
+        for (var i = 0; i < 2 * n; ++i)
+        {
+            tasks.Add(threadPool.Submit(() =>
+            {
+                manualResetEvent.WaitOne();
+                return Thread.CurrentThread;
+            }));
+        }
+        manualResetEvent.Set();
+        Thread.Sleep(100);
+        threadPool.Shutdown();
+        foreach (var task in tasks)
+        {
+            threads.Add(task.Result);
+        }
+        Assert.That(threads, Has.Count.EqualTo(n));
+    }
+
+    [Test]
+    public void SubmitSimpleTaskReturnsExpectedResult()
+    {
+        var expected = 1;
+        var task = threadPool.Submit(() => expected);
+        Assert.That(task.Result, Is.EqualTo(expected));
+    }
+
+    [Test]
+    public void SubmitMultipleTasksReturnsExpectedResult()
+    {
+        List<IMyTask<int>> tasks = [];
+        for (var i = 0; i < threadPool.ThreadsCount; ++i)
+        {
+            var localI = i;
+            var task = threadPool.Submit(() =>
+            {
+                return localI;
+            });
+            tasks.Add(task);
+        }
+        Thread.Sleep(100);
+        for (var i = 0; i < threadPool.ThreadsCount; ++i)
+        {
+            Assert.That(tasks[i].Result, Is.EqualTo(i));
+        }
+    }
+
+    [Test]
+    public void SubmitTaskWithOneContinueTasksReturnsExpectedResult()
+    {
+        var task = threadPool.Submit(() => "1").ContinueWith(x => int.Parse(x!));
+        Assert.That(task.Result, Is.EqualTo(1));
+    }
+
+    [Test]
+    public void SubmitTaskWithMultipleContinueTasksReturnsExpectedResult()
+    {
+        List<IMyTask<int>> tasks = [];
+        var task = threadPool.Submit(() => 2);
+        for (var i = 0; i < threadPool.ThreadsCount; ++i)
+        {
+            var localI = i;
+            var continueTask = task.ContinueWith(x => localI * x);
+            tasks.Add(continueTask);
+        }
+        Thread.Sleep(100);
+        for (var i = 0; i < threadPool.ThreadsCount; ++i)
+        {
+            Assert.That(tasks[i].Result, Is.EqualTo(2 * i));
+        }
+
+    }
+
+    [Test]
+    public void SubmitTaskWithChainedContinueTasksReturnsExpectedResult()
+    {
+        var task = threadPool.Submit(() => "1").ContinueWith(x => int.Parse(x!)).ContinueWith(x => 2 * x + 1);
+        Thread.Sleep(50);
+        var expected = 3;
+        Assert.That(task.Result, Is.EqualTo(expected));
+    }
+
+    [Test]
+    public void ResultFuncThrowsExceptionShouldThrowAgregateException()
+    {
+        var task = threadPool.Submit<int>(() => throw new DivideByZeroException());
+        Assert.Throws<AggregateException>(() => { var result = task.Result; });
+    }
+
+    [Test]
+    public void TasksSubmitedBerforeShutdownAreCompletedAfterShutdown()
+    {
+        List<IMyTask<int>> tasks = new();
+        for (var i = 0; i < 2 * threadPool.ThreadsCount; ++i)
+        {
+            threadPool.Submit(() =>
+            {
+                Thread.Sleep(100);
+                return 1;
+            });
+        }
+        threadPool.Shutdown();
+        foreach (var task in tasks)
+        {
+            Assert.That(task.IsCompleted, Is.True);
+        }
+    }
+
+    [Test]
+    public void SubmitAndContinueWithFromMultipleThreadsPerformsExpectedResults()
+    {
+        var expected = 10;
+        var threadsCount = 6;
+        var actual = new IMyTask<int>[threadsCount];
+        var threads = new Thread[threadsCount];
+        var manualResetEvent = new ManualResetEvent(false);
+
+        for (var i = 0; i < threadsCount; ++i)
+        {
+            var localI = i;
+            threads[i] = new(() =>
+            {
+                manualResetEvent.WaitOne();
+
+                actual[localI] = threadPool.Submit(() => 5).ContinueWith(r => 2 * r);
+            });
+        }
+
+        foreach (var thread in threads)
+        {
+            thread.Start();
+        }
+
+        manualResetEvent.Set();
+
+        foreach (var thread in threads)
+        {
+            thread.Join();
+        }
+
+        Assert.That(actual.All(r => r.Result == expected), Is.True);
+    }
+
+    [Test]
+    public async Task SubmitAndShutdownFromMultipleThreadsPerformsExpectedResults()
+    {
+        var manualResetEvent = new ManualResetEvent(false);
+        var expected = 50 * 101;
+        var actual = 0;
+
+        var submitTask = Task.Run(() =>
+        {
+            manualResetEvent.WaitOne();
+            return threadPool.Submit(() => Enumerable.Range(1, 100).Sum());
+        });
+
+        var firstShutdown = Task.Run(() =>
+        {
+            manualResetEvent.WaitOne();
+            threadPool.Shutdown();
+        });
+
+        var secondShutdown = Task.Run(() =>
+        {
+            manualResetEvent.WaitOne();
+            threadPool.Shutdown();
+        });
+
+        manualResetEvent.Set();
+
+        try
+        {
+            actual = (await submitTask).Result;
+        }
+        catch (OperationCanceledException)
+        {
+            Assert.Pass();
+        }
+
+        Assert.That(actual, Is.EqualTo(expected));
+    }
+}
\ No newline at end of file


diff --git a/MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.csproj b/MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.csproj
new file mode 100644
index 0000000..816b8e1
--- /dev/null
+++ b/MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.csproj
@@ -0,0 +1,24 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>net8.0</TargetFramework>
+    <ImplicitUsings>enable</ImplicitUsings>
+    <Nullable>enable</Nullable>
+
+    <IsPackable>false</IsPackable>
+    <IsTestProject>true</IsTestProject>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.6.0" />
+    <PackageReference Include="NUnit" Version="3.13.3" />
+    <PackageReference Include="NUnit3TestAdapter" Version="4.2.1" />
+    <PackageReference Include="NUnit.Analyzers" Version="3.6.1" />
+    <PackageReference Include="coverlet.collector" Version="6.0.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\MyThreadPool\MyThreadPool.csproj" />
+  </ItemGroup>
+
+</Project>


diff --git a/MyThreadPool/stylecop.json b/MyThreadPool/stylecop.json
new file mode 100644
index 0000000..99e8442
--- /dev/null
+++ b/MyThreadPool/stylecop.json
@@ -0,0 +1,17 @@
+{
+    "$schema": "https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json",
+    "settings": {
+      "documentationRules": {
+        "copyrightText": "Copyright (c) 2024\n\nUse of this source code is governed by an MIT license\nthat can be found in the LICENSE file or at\nhttps://opensource.org/licenses/MIT.",
+        "xmlHeader": false,
+        "documentExposedElements": false
+      },
+      "layoutRules": {
+        "newlineAtEndOfFile": "require"
+      },
+      "indentation": {
+        "indentationSize": 4,
+        "useTabs": false
+      }
+    }
+}
\ No newline at end of file
