[
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 0,
    "end_line": 0,
    "original_start_line": 35,
    "original_end_line": 36,
    "body": "```suggestion\r\n                var cancellationToken = this.cancellationTokenSource.Token;\r\n                while (!cancellationToken.IsCancellationRequested)\r\n```"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 0,
    "end_line": 0,
    "original_start_line": 37,
    "original_end_line": 37,
    "body": "Поступает 1 задача раз в 10 секунд на пул с 10 потоками => большая трата ресурсов процессора впустую.\r\n\r\nПредлагаю улучшить механизм ожидания потоков: вместо простой крутящейся блокировки добавить ResetEvent-ов. Чтобы потоки не крутились, а ждали на WaitOne и запускались при определенном событии. Например, при появлении задачи.\r\n\r\nВпрочем, при каком событии запускаться (и сколько потоков запускать) можно и поинтереснее придумать, всё-таки одно из самых интересных мест в задаче )"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 90,
    "end_line": 90,
    "original_start_line": 76,
    "original_end_line": 76,
    "body": "Если в разных потоках вызовем Submit и Shutdown?\r\nНужно предусмотреть отсутствие гонок в такой ситуации"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 0,
    "end_line": 0,
    "original_start_line": 136,
    "original_end_line": 136,
    "body": "Можем здесь вызывать Submit и избавиться от private-метода QueryContinution?"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 0,
    "end_line": 0,
    "original_start_line": 140,
    "original_end_line": 140,
    "body": "И здесь QueryContinuation не понадобится: можно вызывать Submit или хранить сами task-и"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 211,
    "end_line": 211,
    "original_start_line": 169,
    "original_end_line": 169,
    "body": "Возможен такой кейс: вызовем Shutdown, дальше произойдет переключение контекстов, попадем сюда. Добавим задачу на пул.\r\n\r\nНужно предусмотреть отсутствие гонок между добавлением continuation-ов на пул и вызовом Shutdown."
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 162,
    "end_line": 162,
    "original_start_line": 130,
    "original_end_line": 130,
    "body": "В методе ContinueWith нужно тоже предусмотреть отсутствие гонок с Shutdown"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 0,
    "end_line": 0,
    "original_start_line": 101,
    "original_end_line": 101,
    "body": "Именно concurrent?"
  },
  {
    "path": "MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.cs",
    "start_line": 0,
    "end_line": 0,
    "original_start_line": 27,
    "original_end_line": 27,
    "body": "Предлагаю здесь использовать resetEvent вместо Thread.Sleep для исключения неожиданного поведения в тесте "
  },
  {
    "path": "MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.cs",
    "start_line": 0,
    "end_line": 0,
    "original_start_line": 40,
    "original_end_line": 40,
    "body": "Эта функция и одна ниже тоже [Test]?"
  },
  {
    "path": "MyThreadPool/MyThreadPoolTests/MyThreadPoolTests.cs",
    "start_line": 10,
    "end_line": 10,
    "original_start_line": 6,
    "original_end_line": 6,
    "body": "Ещё стоит добавить тестов на конкурентный доступ к методам тредпула: по типу Submit и Shutdown одновременно"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 90,
    "end_line": 90,
    "original_start_line": 76,
    "original_end_line": 76,
    "body": "Я немного не понимаю как это сделать. Например есть 2 потока, из первого вызываем Submit, а из второго Shutdown в одно и то же время, если внутри этих методов будет какой-нибудь эвент или лок, то разве можно гарантировать что кто-то из них всегда будет первым в него заходить?"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 90,
    "end_line": 90,
    "original_start_line": 76,
    "original_end_line": 76,
    "body": "Да, нельзя.\r\nЯ про гонки при исполнении самих методов: например, прошли блок \r\n``` \r\nif (this.cancellationTokenSource.IsCancellationRequested)\r\n        {\r\n            throw new OperationCanceledException(\"Threadpool was shut down!\");\r\n        }\r\n```\r\nДальше планировщик приостановил поток, зашли в Shutdown, успели запросить завершение работы, после этого вернулись в Submit и радостно положили в очередь задачу:\r\n```\r\n        var newMyTask = new MyTask<T>(this, task, this.cancellationTokenSource.Token);\r\n        this.tasks.Enqueue(() => newMyTask.Start());\r\n```\r\nВот для таких ситуаций нужен лок (по очереди задач, например) или эвент, который гарантирует исполнение shutdown либо строго до submit, либо строго после submit"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 115,
    "end_line": 115,
    "original_start_line": 108,
    "original_end_line": 108,
    "body": "Ага, так сильно лучше.\r\nЕсть ещё замечания от разработчиков, мол [\"если вызовы autoResetEvent находятся слишком близко друг к другу, то может пройти лишь один поток\"](https://learn.microsoft.com/en-us/dotnet/api/system.threading.autoresetevent?view=net-8.0#:~:text=There%27s%20no%20guarantee,has%20no%20effect.), но действительно ли такой эффект воспроизводится, и какими дополнительными инженерными решениями можно его избежать, уже другая история"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 0,
    "end_line": 0,
    "original_start_line": 114,
    "original_end_line": 117,
    "body": "Предлагаю перенести условие выхода в while, вместо **true**"
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 55,
    "end_line": 55,
    "original_start_line": 55,
    "original_end_line": 55,
    "body": "Да, уже лучше: если вызвать ShutDown, то благодаря выставлению shutdownEvent, задачу в submit уже нельзя будет положить.\r\nНо остается проблема, что submit может параллельно исполняться с shutDown, если в него зашли раньше, чем в ShutDown. То есть можем в submit создать задачу, переключить контекст, в shutDown выполнить половину кода, а дальше в Submit задачу на пул положить.\r\n\r\nНужно сделать так, чтобы submit и shutdown в рамках одной критической секции исполнялись: либо один, либо другой. Или текущее решение модифицировать, добавив ещё один event, регулируемый submit, или брать lock по защищаемому ресурсу -- очереди задач."
  },
  {
    "path": "MyThreadPool/MyThreadPool/MyThreadPool.cs",
    "start_line": 161,
    "end_line": 161,
    "original_start_line": 158,
    "original_end_line": 158,
    "body": "В этом методе тоже нужно реализовать механизм синхронизации с ShutDown (аналогично механизму, который описал для Submit и ShutDown)"
  }
]