diff --git 

diff --git a/.gitignore b/.gitignore
index 20ba42d..06663cc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,49 +1,172 @@
-{\rtf1\ansi\ansicpg1251\cocoartf2759
-\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
-{\colortbl;\red255\green255\blue255;}
-{\*\expandedcolortbl;;}
-\paperw11900\paperh16840\margl1440\margr1440\vieww30040\viewh18900\viewkind0
-\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
-
-\f0\fs24 \cf0 [Bb]in/\
-[Oo]bj/\
-\
-.vs/\
-*.suo\
-*.user\
-*.bak\
-*.csproj.user\
-*.sln.docstates\
-\
-# Build results\
-*.exe\
-*.dll\
-*.pdb\
-*.map\
-*.aps\
-*.metadb\
-*.unitypackage\
-*.orig\
-*.swp\
-*.lock\
-*.log\
-\
-packages/\
-*.nupkg\
-\
-.DS_Store\
-\
-tmp/\
-temp/\
-[Tt]emp/\
-\
-.idea/\
-\
-*.config \
-appsettings.Development.json\
-\
-Library/\
-Temp/\
-UnityPackageManager/\
-ProjectSettings/\
-UserSettings/}
\ No newline at end of file
+# Common IntelliJ Platform excludes
+
+.idea/
+*.user
+*.suo
+*.csproj.user
+
+# User specific
+**/.idea/**/workspace.xml
+**/.idea/**/tasks.xml
+**/.idea/shelf/*
+**/.idea/dictionaries
+**/.idea/httpRequests/
+
+# Sensitive or high-churn files
+**/.idea/**/dataSources/
+**/.idea/**/dataSources.ids
+**/.idea/**/dataSources.xml
+**/.idea/**/dataSources.local.xml
+**/.idea/**/sqlDataSources.xml
+**/.idea/**/dynamic.xml
+
+# Rider
+# Rider auto-generates .iml files, and contentModel.xml
+**/.idea/**/*.iml
+**/.idea/**/contentModel.xml
+**/.idea/**/modules.xml
+
+*.suo
+*.user
+.vs/
+[Bb]in/
+[Oo]bj/
+_UpgradeReport_Files/
+[Pp]ackages/
+
+Thumbs.db
+Desktop.ini
+.DS_Store
+## Ignore Visual Studio temporary files, build results, and
+## files generated by popular Visual Studio add-ons.
+
+# User-specific files
+*.suo
+*.user
+*.sln.docstates
+
+# Build results
+
+[Dd]ebug/
+[Rr]elease/
+x64/
+[Bb]in/
+[Oo]bj/
+
+# MSTest test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+*_i.c
+*_p.c
+*_i.h
+*.ilk
+*.meta
+*.obj
+*.pch
+*.pdb
+*.pgc
+*.pgd
+*.rsp
+*.sbr
+*.tlb
+*.tli
+*.tlh
+*.tmp
+*.tmp_proj
+*.log
+*.vspscc
+*.vssscc
+.builds
+*.pidb
+*.log
+*.svclog
+*.scc
+
+# Visual C++ cache files
+ipch/
+*.aps
+*.ncb
+*.opensdf
+*.sdf
+*.cachefile
+
+# Visual Studio profiler
+*.psess
+*.vsp
+*.vspx
+
+# Guidance Automation Toolkit
+*.gpState
+
+# ReSharper is a .NET coding add-in
+_ReSharper*/
+*.[Rr]e[Ss]harper
+*.DotSettings.user
+
+# Click-Once directory
+publish/
+
+# Publish Web Output
+*.Publish.xml
+*.pubxml
+*.azurePubxml
+
+# NuGet Packages Directory
+## TODO: If you have NuGet Package Restore enabled, uncomment the next line
+packages/
+## TODO: If the tool you use requires repositories.config, also uncomment the next line
+!packages/repositories.config
+
+# Windows Azure Build Output
+csx/
+*.build.csdef
+
+# Windows Store app package directory
+AppPackages/
+
+# Others
+sql/
+*.Cache
+ClientBin/
+[Ss]tyle[Cc]op.*
+![Ss]tyle[Cc]op.targets
+~$*
+*~
+*.dbmdl
+*.[Pp]ublish.xml
+
+*.publishsettings
+
+# RIA/Silverlight projects
+Generated_Code/
+
+# Backup & report files from converting an old project file to a newer
+# Visual Studio version. Backup files are not needed, because we have git ;-)
+_UpgradeReport_Files/
+Backup*/
+UpgradeLog*.XML
+UpgradeLog*.htm
+
+# SQL Server files
+App_Data/*.mdf
+App_Data/*.ldf
+
+# =========================
+# Windows detritus
+# =========================
+
+# Windows image file caches
+Thumbs.db
+ehthumbs.db
+
+# Folder config file
+Desktop.ini
+
+# Recycle Bin used on file shares
+$RECYCLE.BIN/
+
+# Mac desktop service store files
+.DS_Store
+
+_NCrunch*


diff --git a/HW7/FilterMapFold/FilterMapFold.Tests/FilterMapFold.Tests.csproj b/HW7/FilterMapFold/FilterMapFold.Tests/FilterMapFold.Tests.csproj
new file mode 100644
index 0000000..3c07c88
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold.Tests/FilterMapFold.Tests.csproj
@@ -0,0 +1,27 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+
+    <PropertyGroup>
+        <TargetFramework>net9.0</TargetFramework>
+        <LangVersion>latest</LangVersion>
+        <ImplicitUsings>enable</ImplicitUsings>
+        <Nullable>enable</Nullable>
+        <IsPackable>false</IsPackable>
+    </PropertyGroup>
+
+    <ItemGroup>
+        <PackageReference Include="coverlet.collector" Version="6.0.2"/>
+        <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.12.0"/>
+        <PackageReference Include="NUnit" Version="4.2.2"/>
+        <PackageReference Include="NUnit.Analyzers" Version="4.4.0"/>
+        <PackageReference Include="NUnit3TestAdapter" Version="4.6.0"/>
+    </ItemGroup>
+
+    <ItemGroup>
+        <Using Include="NUnit.Framework"/>
+    </ItemGroup>
+
+    <ItemGroup>
+      <ProjectReference Include="..\FilterMapFold\FilterMapFold.csproj" />
+    </ItemGroup>
+
+</Project>


diff --git a/HW7/FilterMapFold/FilterMapFold.Tests/Tests.cs b/HW7/FilterMapFold/FilterMapFold.Tests/Tests.cs
new file mode 100644
index 0000000..8aaa29d
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold.Tests/Tests.cs
@@ -0,0 +1,83 @@
+﻿namespace FilterMapFold.Tests;
+
+using FilterMapFold.Exceptions;
+
+public class Tests
+{
+    [SetUp]
+    public void Setup()
+    {
+    }
+
+    [Test]
+    public void FilterFunctionOrdinaryDataTest()
+    {
+        var collection = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
+        var resultCollection = new int[] { 0, 2, 4, 6, 8 };
+        var predicate = new Func<int, bool>(i => i % 2 == 0);
+        Assert.That(HigherOrderFunctions.Filter(collection, predicate), Is.EquivalentTo(resultCollection));
+    }
+
+    [Test]
+    public void FilterEmptyCollectionTest()
+    {
+        var collection = new int[] { };
+        var resultCollection = new int[] { };
+        var predicate = new Func<int, bool>(i => i % 2 == 0);
+        Assert.That(HigherOrderFunctions.Filter(collection, predicate), Is.EquivalentTo(resultCollection));
+    }
+
+    [Test]
+    public void FilterEmptyPredicateTest() //TODO rename method
+    {
+        var collection = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
+        var resultCollection = new int[] { };
+        var predicate = new Func<int, bool>(i => i % 11 == 0);
+        Assert.That(HigherOrderFunctions.Filter(collection, predicate), Is.EquivalentTo(resultCollection));
+    }
+    
+    [Test]
+    public void MapFunctionOrdinaryDataTest()
+    {
+        var collection = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
+        var resultCollection = new int[] { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18 };
+        var function = new Func<int, int>(i => i * 2);
+        Assert.That(HigherOrderFunctions.Map(collection, function), Is.EquivalentTo(resultCollection));
+    }
+
+    [Test]
+    public void MapEmptyCollectionTest()
+    {
+        var collection = new int[] { };
+        var resultCollection = new int[] { };
+        var function = new Func<int, int>(i => i * 2);
+        Assert.That(HigherOrderFunctions.Map(collection, function), Is.EquivalentTo(resultCollection));
+    }
+    
+    [Test]
+    public void FoldFunctionOrdinaryDataTest()
+    {
+        var collection = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
+        var function = new Func<int, int, int>((x, y) => x + y);
+        Assert.That(HigherOrderFunctions.Fold(collection, function), Is.EqualTo(45));
+    }
+
+    [Test]
+    public void FoldFunctionStringDataTest()
+    {
+        var collection = new string[] { "a", "b", "c", "d", "e", "f" };
+        var function = new Func<string, string, string>((x, y) => $"{x}{y}");
+        Assert.That(HigherOrderFunctions.Fold(collection, function), Is.EquivalentTo("abcdef"));
+    }
+
+    [Test]
+    public void FoldEmptyCollectionTest()
+    {
+        var collection = new int[] { };
+        var function = new Func<int, int, int>((x, y) => x + y);
+        Assert.Throws<EmptyCollectionFoldException>(() =>
+        {
+            HigherOrderFunctions.Fold(collection, function);
+        });
+    }
+}
\ No newline at end of file


diff --git a/HW7/FilterMapFold/FilterMapFold.sln b/HW7/FilterMapFold/FilterMapFold.sln
new file mode 100644
index 0000000..752c8c5
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold.sln
@@ -0,0 +1,22 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FilterMapFold", "FilterMapFold\FilterMapFold.csproj", "{EF3DB8C8-6E86-4C7E-9F09-B4268CC529E9}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "FilterMapFold.Tests", "FilterMapFold.Tests\FilterMapFold.Tests.csproj", "{9F95848A-0710-4FEB-A054-FB91F9EC7A64}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{EF3DB8C8-6E86-4C7E-9F09-B4268CC529E9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{EF3DB8C8-6E86-4C7E-9F09-B4268CC529E9}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{EF3DB8C8-6E86-4C7E-9F09-B4268CC529E9}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{EF3DB8C8-6E86-4C7E-9F09-B4268CC529E9}.Release|Any CPU.Build.0 = Release|Any CPU
+		{9F95848A-0710-4FEB-A054-FB91F9EC7A64}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{9F95848A-0710-4FEB-A054-FB91F9EC7A64}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{9F95848A-0710-4FEB-A054-FB91F9EC7A64}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{9F95848A-0710-4FEB-A054-FB91F9EC7A64}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+EndGlobal


diff --git a/HW7/FilterMapFold/FilterMapFold/EmptyCollectionFoldException.cs b/HW7/FilterMapFold/FilterMapFold/EmptyCollectionFoldException.cs
new file mode 100644
index 0000000..8a65b21
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold/EmptyCollectionFoldException.cs
@@ -0,0 +1,9 @@
+namespace FilterMapFold.Exceptions;
+
+public class EmptyCollectionFoldException : InvalidOperationException
+{
+    public EmptyCollectionFoldException()
+        : base("Cannot perform fold on an empty collection without an initial value.")
+    {
+    }
+}
\ No newline at end of file


diff --git a/HW7/FilterMapFold/FilterMapFold/Filter.cs b/HW7/FilterMapFold/FilterMapFold/Filter.cs
new file mode 100644
index 0000000..532170d
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold/Filter.cs
@@ -0,0 +1,15 @@
+namespace FilterMapFold;
+
+public static partial class HigherOrderFunctions
+{
+    public static IEnumerable<T> Filter<T>(this IEnumerable<T> source, Func<T, bool> predicate)
+    {
+        foreach (var item in source)
+        {
+            if (predicate(item))
+            {
+                yield return item;
+            }
+        }
+    }
+}
\ No newline at end of file


diff --git a/HW7/FilterMapFold/FilterMapFold/FilterMapFold.csproj b/HW7/FilterMapFold/FilterMapFold/FilterMapFold.csproj
new file mode 100644
index 0000000..85b4959
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold/FilterMapFold.csproj
@@ -0,0 +1,10 @@
+﻿<Project Sdk="Microsoft.NET.Sdk">
+
+    <PropertyGroup>
+        <OutputType>Exe</OutputType>
+        <TargetFramework>net9.0</TargetFramework>
+        <ImplicitUsings>enable</ImplicitUsings>
+        <Nullable>enable</Nullable>
+    </PropertyGroup>
+
+</Project>


diff --git a/HW7/FilterMapFold/FilterMapFold/Fold.cs b/HW7/FilterMapFold/FilterMapFold/Fold.cs
new file mode 100644
index 0000000..17ba22b
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold/Fold.cs
@@ -0,0 +1,21 @@
+namespace FilterMapFold;
+
+using FilterMapFold.Exceptions;
+
+public static partial class HigherOrderFunctions
+{
+    public static T Fold<T>(IEnumerable<T> source, Func<T, T, T> function)
+    {
+        if (!source.Any())
+        {
+            throw new EmptyCollectionFoldException();
+        }
+        var collection = source.ToList();
+        var result = collection[0];
+        for (var i = 1; i < collection.Count; i++)
+        {
+            result = function(result, collection[i]);
+        }
+        return result;
+    }
+}
\ No newline at end of file


diff --git a/HW7/FilterMapFold/FilterMapFold/Map.cs b/HW7/FilterMapFold/FilterMapFold/Map.cs
new file mode 100644
index 0000000..2fec2cb
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold/Map.cs
@@ -0,0 +1,12 @@
+namespace FilterMapFold;
+
+public static partial class HigherOrderFunctions
+{
+    public static IEnumerable<T> Map<T>(this IEnumerable<T> source, Func<T, T> func)
+    {
+        foreach (var item in source)
+        {
+            yield return func(item);
+        }
+    }
+}
\ No newline at end of file


diff --git a/HW7/FilterMapFold/FilterMapFold/Program.cs b/HW7/FilterMapFold/FilterMapFold/Program.cs
new file mode 100644
index 0000000..3af6bdc
--- /dev/null
+++ b/HW7/FilterMapFold/FilterMapFold/Program.cs
@@ -0,0 +1,3 @@
+static void Main(string[] args)
+{
+}
\ No newline at end of file
